[[_git_branches_overview]]
=== Branches in a Nutshell

เพื่อทำความเข้าใจวิธีที่ Git แตก branch เราต้องย้อนกลับมาดูว่า Git เก็บข้อมูลยังไง ตามที่คุณอาจจะจำได้จาก Chapter 1 ว่า Git ไม่ได้เก็บข้อมูลเป็นลำดับของความเปลี่ยนแปลงต่อเวลาแต่เก็บเป็นลำดับของ snapshot ต่อเวลา

เวลาคุณ commit ใน Git นั้น Git จะเก็บเป็น object ของการ commit ซึ่งประกอบด้วย pointer ชี้ไปยัง snapshot ของ content ที่คุณ stage ไว้, metadata ของชื่อผู้แก้ไขและ message ที่บันทึกไว้ และ pointer ที่ชี้ไปยัง parent ลำดับถัดไปของ commit นั้นๆ (ซึ่งอาจจะไม่มีก็ได้ถ้าเป็น commit ครั้งแรก, อาจจะมีอันเดียวชี้ไปยัง parent ของ commit ปรกติทั่วไปหรืออาจจะมี parent หลายอันสำหรับ commit ที่เป็นผลจากการ merge หลายๆ branch เข้าด้วยกัน)

ลองจินตนาการว่าคุณมี directory อันนึงที่มี file อยู่ข้างใน 3 files แล้วคุณก็ stage ทั้งหมดและ commit การ stage file จะสร้าง checksum ของแต่ละ file (ไอ้ SHA-1 hash ที่บอกไว้ใน Chapter 1 นั่นแหละ), แล้วบันทึก version ของ file นั้นๆใน Git repository (Git อ้างอิงพวกมันแบบ blobs) และเพิ่ม checksum นั้นลงไปใน staging area:

[source,console]
----
$ git add README test.rb LICENSE
$ git commit -m 'initial commit of my project'
----

เมื่อคุณทำการ commit ด้วยคำสั่ง git commit Git จะคำนวน checksum ของแต่ละ subdirectory (ในกรณีนี้ก็มีแค่ root project directory) และบันทึกโครงสร้างของ directory ใน Git repository หลังจากนั้น Git ก็จะสร้าง commit object ที่มี metadata และ pointer ชี้ไปยังโครงสร้างของ root project เพื่อที่มันจะได้สร้าง snapshot นั้นขึ้นมาใหม่ได้เมื่อต้องการ

Git repository ของคุณตอนนี้จะมี 5 objects: blob แต่ละ blob สำหรับ content ของแต่ละ file ใน 3 files นั้น, โครงสร้าง root directory ที่เก็บ list ของสิ่งของในนั้นและบันทึกว่า file ไหนถูกเก็บใส่ blob ไหน และ 1 commit ที่มี pointer อันนึงชี้ไปยังโครงสร้างของ root directory กับพวก metadata ของ commit นั้น ซึ่งหน้าตาของข้อมูลใน Git repository ของคุณก็มีคอนเซปประมาณรูป Figure 3-1.

.A commit and its tree
image::images/commit-and-tree.png[A commit and its tree.]

ถ้าคุณทำการแก้ไขใดๆ แล้ว commit ซ้ำอีกครั้ง commit อันถัดไปจะเก็บในรูป pointer ชี้ไปยัง commit ก่อนหน้า ทำไปอีก 2 commits history ของคุณน่าจะมีหน้าตาประมาณรูป

.Commits and their parents
image::images/commits-and-parents.png[Commits and their parents.]

branch อันนึงใน Git เป็นแค่ pointer ฉบับกระเป๋าของ commits เหล่านี้ ชื่อโดย default ของ branch ใน Git คือ master ขณะที่คุณ commit ครั้งแรกส่งกำลังส่ง master branch อันนึงที่ points กลับไปยัง commit ก่อนหน้า ทุกครั้งที่คุณ commit มันก็ค่อยๆขยับไปๆโดยอัตโนมัติ

[NOTE]
====
branch ชื่อ master ใน Git ไม่ใช่ branch พิเศษอะไรเลย (((master))) มันเป็นเพียง branch ธรรมดาเหมือนกับ branch อื่นๆแต่สาเหตุที่ทำให้ทุกๆ repository ต้องมี branch
นี้เพราะมันถูกสร้างขึ้นมาเป็น branch แรกโดยคำสั่ง 'git init' และเมื่อมันถูกสร้างแล้วมันก็ไม่เคยถูกเปลี่ยนเลย อาจเป็นเพราะไม่มีใครสนใจจะเปลี่ยนมันด้วยมั้ง
====

.A branch and its commit history
image::images/branch-and-history.png[A branch and its commit history.]

[[_create_new_branch]]
==== การสร้าง Branch ใหม่

(((branches, creating)))
แล้วจะเกิดอะไรขึ้นถ้าคุณสร้าง branch ใหม่? ก็แค่สร้าง pointer อันใหม่เพื่อที่จะโยกย้ายไปมาตามใจ ยกตัวอย่างว่าคุณสร้าง branch ใหม่ชื่อว่า testing ซึ่งสามารถทำได้ด้วยคำสั่ง git branch:

[source,console]
----
$ git branch testing
----

มันจะสร้าง pointer อันใหม่ใน commit ปัจจุบันที่คุณอยู่

.Two branches pointing into the same series of commits
image::images/two-branches.png[Two branches pointing into the same series of commits.]

แล้ว Git รู้ได้ไงนะว่าเรากำลังทำงานอยู่บน Branch ไหน?
รู้สิเพราะมันมี pointer พิเศษชื่อ `HEAD` อยู่ อย่างไรก็ตามคำว่า `HEAD` ของ Git นี่ต่างจาก VCS ที่พวกเราเคยใช้เช่น Subversion, CVS อย่างมากมาย
ใน Git นั้นเจ้า HEAD จะชี้ไปที่ local branch ที่เรากำลังทำงานอยู่ซึ่งถ้าเรายังไม่มีการเปลี่ยน branch ไปไหนมันก็จะชี้ไว้ที่ Master ดังนั้น `git branch`
จึงเป็นคำสั่งที่มีไว้สร้าง branch เพียงเท่านั้นมันไม่ได้ switch branch ให้เราแม้แต่นิดเดียว


.HEAD pointing to a branch
image::images/head-to-master.png[HEAD pointing to a branch.]

ซึ่งถ้าเราอยากรู้ว่าตอนนี้ HEAD อยู่ที่ไหนเราสามารถใช้คำสั่ง `git log` เพื่อแสดงข้อมูลออกมาได้และการแสดงข้อมูลแบบนี้เราจะต้องส่ง option เพิ่มที่ชื่อ decorate เข้าไปด้วยดังนี้

[source,console]
----
$ git log --oneline --decorate
f30ab (HEAD, master, testing) add feature #32 - ability to add new
34ac2 fixed bug #1328 - stack overflow under certain conditions
98ca9 initial commit of my project
----

เราจะเห็น branch ชื่อ ``master'' และ ``testing'' อยู่เคียงข้างกันที่ commit หมายเลข `f30ab`

[[_switching_branches]]
==== Switching Branches

(((branches, switching)))
ดังนั้นถ้าเราต้องการเปลี่ยน branch เพื่อไปทำงานที่ branch ใหม่เราสามารถทำได้ด้วยการใช้ำคำสั่ง `git checkout`(((git commands, checkout)))
เราไปทำงานที่ branch ชื่อ testing กัน

[source,console]
----
$ git checkout testing
----

คำสั่งนี้จะย้าย `HEAD` ให้ไปชี้ที่ `testing` branch.

.HEAD points to the current branch
image::images/head-to-testing.png[HEAD points to the current branch.]

แล้วมีความสำคัญยังไง?
เรามาดู commit ด้านล่างนี้กัน:

[source,console]
----
$ vim test.rb
$ git commit -a -m 'made a change'
----

.The HEAD branch moves forward when a commit is made
image::images/advance-testing.png[The HEAD branch moves forward when a commit is made.]

น่าสนใจมาก เพราะตอนนี้ testing branch ของเรา ขยับไปข้างหน้า แต่ master branch ของเรา ยังชี้ไปยัง commit ที่คุณอยู่ก่อนหน้านี้ตอนที่ switch branch ด้วยคำสั่ง `git checkout` เพื่อ switch branches กลับไปยัง master branch:

[source,console]
----
$ git checkout master
----

.HEAD moves when you checkout
image::images/checkout-master.png[HEAD moves when you checkout.]

คำสั่งนั้นทำ 2 อย่าง ขยับ HEAD pointer กลับไปยัง master branch และ revert files ใน working directory ของเรา กลับไปยัง snapshot ที่ master ชี้อยู่ซึ่งหมายความว่าความเปลี่ยนแปลงทั้งหลายที่เราแก้ไปตั้งแต่จุดนี้ถูกแยกออกไปจาก version เก่าของโปรเจ็ค สรุปคือ rewind งานที่เราทำไปบน testing branch กลับมาชั่วคราวเพื่อที่คเราจะได้ลองแก้ไปทางอื่นได้

[หมายเหตุ]
.การสลับ branches จะเปลี่ยนไฟล์ใน working directory ของเรา
====
สิ่งสำคัญคือ ต้องสังเกตุว่าเมื่อเรา switch branches ใน Git ไฟล์ใน working directory ของเราเราจะเปลี่ยน ถ้าเรา switch branch ไป Version เก่า working directory ของเราจะ revert มาให้เหมือนกับกับครั้งสุดท้ายที่เรา commit ที่ branch นั้น ถ้า Git ไม่สามารถทำได้ จะไม่ให้เรา switch ทั้งหมด
====

มาลองแก้ file ซักนิดแล้ว commit อีกทีดู:

[source,console]
----
$ vim test.rb
$ git commit -a -m 'made other changes'
----

ตอนนี้ project history ของเรา ถูกแยกออก (ดู <<divergent_history>>) เราสร้าง branch ใหม่ และ switch ไป ทำงานไปบนนั้น แล้ว switch กลับมาที่ branch หลักของเรา แล้วทำงานอื่นไป ความเปลี่ยนแปลงทั้ง 2 สาย ถูกตัดขาดจากกันใน branch ทั้งสอง เราสามารถ switch กลับไปกลับมาระหว่างสอง branches ได้ แล้วค่อย merge เข้าด้วยกันเมื่อเราพร้อม ซึ่งทั้งหมดนั่นทำได้ด้วยคำสั่ง `branch`, `checkout` และ `commit` 

[[divergent_history]]
.Divergent history
image::images/advance-master.png[Divergent history.]

เราสามารถดูอย่างง่ายด้วยคำสั่ง `git log` ถ้าเราใช้คำสั่ง `git log --oneline --decorate --graph --all` จะแสดงประวัติ commit ของเรา แสดงว่าเราอยู่จุดไหนของ branch และประวัติของเราแตกต่างกันอย่างไร

[source,console]
----
$ git log --oneline --decorate --graph --all
* c2b9e (HEAD, master) made other changes
| * 87ab2 (testing) made a change
|/
* f30ab add feature #32 - ability to add new formats to the
* 34ac2 fixed bug #1328 - stack overflow under certain conditions
* 98ca9 initial commit of my project
----

เนื่องจาก branch ใน Git จริง ๆ แล้ว เป็นแค่ file ธรรมดา ๆ ที่เก็บตัวหนังสือ 40 อักษรที่เป็น SHA-1 checksum ของ commit ที่ชี้ไปหา branches are cheap การสร้างและทำลาย การสร้าง branch ใหม่ทำได้รวดเร็วและเรียบง่ายเหมือนกับการเขียน 41 bytes ไปยัง file (40 ตัวอักษร และ บรรทัดใหม่)

แตกต่างกับการแตก branch ใน VCS tool ที่ต้องคัดลอกไฟล์ทั้งหมดของ project ไปยัง directory ที่สอง ซึ่งอาจใช้เวลาหลายวินาที หรืออาจจะเป็นนาที ขึ้นอยู่กับขนาดของ project ขณะที่ในกระบวนการทำงานของ Git ทำได้ทันทีแค่พริบตา นอกจากนี้ เนื่องจากเราบันทึก parent เมื่อเรา commit เวลาต้องหาต้นตอ version เวลาจะ merge ก็ทำได้โดยอัตโนมัติ ด้วย features นี้ ช่วยสนับสนุนให้ developer สร้างและใช้ branches มากขึ้น

ลองดูเหตุผลที่คุณควรทำเช่นนั้น
