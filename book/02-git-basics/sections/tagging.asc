[[_git_tagging]]
=== การติดแท็ก(tags)

(((tags)))
ก็ไม่ต่างจากระบบ VCSs อื่นๆ Git สามารถติดแท็กลงไปตรงจุดที่ต้องการโดยเฉพาะเพื่อระบุความสำคัญลงไปใน history
โดยปกติแล้ว เราจะใช้ฟังก์ชั่นนี้เพื่อ กำหนดจุดที่จะปล่อยของ(release) (v1.0 และอื่นๆ)
ทีนี้เราก็จะมาเรียนวิธีที่จะขอดูรายชื่อแท็ก วิธีสร้างแท็ก และความแตกต่างของแท็กว่ามีชนิดไหนบ้างกัน

==== แสดงรายการที่คุณแท็กไว้

การแสดงรายการแท็กใน Git ไม่อ้อมค้อมครับ แค่พิมพ์คำสั่ง
`git tag`:(((git commands, tag)))

[source,console]
----
$ git tag
v0.1
v1.3
----

คำสั่งนี้จะแสดงรายชื่อแท็กโดยเรียงตามตัวอักษร; โดยลำดับที่ปรากฎไม่ได้เรียกตามความสำคัญใดๆ

คุณสามารถค้นหาแท็กได้ด้วยการเจาะจงรูปแบบ เช่น ใน repo มีมากกว่า 500 แท็ก ถ้าคุณสนใจที่จะมองหาแถวๆลำดับที่ 1.8.5 คุณสามารถใช้คำสั่งดังนี้:

[source,console]
----
$ git tag -l 'v1.8.5*'
v1.8.5
v1.8.5-rc0
v1.8.5-rc1
v1.8.5-rc2
v1.8.5-rc3
v1.8.5.1
v1.8.5.2
v1.8.5.3
v1.8.5.4
v1.8.5.5
----

==== การสร้างแท็ก

ปกติ Git จะใช้แท็กอยู่สองชนิดหลักๆคือ  : lightweight และ annotated

แท็กแบบ lightweight  จะเหมือนกับ branch มากซึ่งมันจะไม่มีการเปลี่ยนแปลง และมันเป็นแค่การกำหนดความสำคัญลงไปที่ commit นั้นๆ

แท็กแบบ Annotated จะเก็บทุก object ลงในฐานข้อมูลของ Git
โดยมันจะถูก checksummed จากสิ่งที่ถูกเก็บไว้ ไม่ว่าจะเป็น ชื่อแท็ก อีเมล์ และวันที่ มีข้อความที่ติดแท็ก และสามารถลงนามและตรวจสอบได้ตามมาตรฐาน GPG
คำแนะนำโดยทั่วไป เมื่อคุณสร้าง annotated tags คุณสามารถเก็บรายละเอียดทั้งหมดนี้ไว้ได้ แต่ถ้าคุณต้องการติดแท็กแค่ชั่วคราว หรือด้วยเหตุผลอะไรก็ตามที่คุณไม่ต้องการเก็บข้อมูลอื่นๆเลย การใช้ lightweight tags น่าจะเป็นทางเลือกที่เหมาะสมกว่า

[[_annotated_tags]]
==== Annotated Tags

(((tags, annotated)))
การสร้างแท็กแบบ annotated ใน Git ทำได้ง่ายมาก โดยการใส่ `-a` เวลารันคำสั่ง `tag` :(((git commands, tag)))

[source,console]
----
$ git tag -a v1.4 -m 'my version 1.4'
$ git tag
v0.1
v1.3
v1.4
----

`-m` ใช้สำหรับระบุข้อความที่จะเก็บไว้กับแท็กนั้น
ถ้าคุณไม่ระบุข้อความลงไป Git จะเปิด editor ขึ้นมาให้คุณใส่ข้อความลงไป

คุณสามารถดูข้อมูลของแท็ก พร้อมกับ commit ที่ถูกติดแท็กได้โดยใช้คำสั่ง`git show`:

[source,console]
----
$ git show v1.4
tag v1.4
Tagger: Ben Straub <ben@straub.cc>
Date:   Sat May 3 20:19:12 2014 -0700

my version 1.4

commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the version number
----

ผลลัพธ์แสดงให้เห็นข้อมูลผู้ที่ติดแท็ก วันที่ที่ commit ถูกแท็ก และข้อความของ annotated ก่อนจะแสดงรายละเอียดของ commit

==== Lightweight Tags

(((tags, lightweight)))
อีกทางเลือกหนึ่งของการแท็กคือติดแบบ lightweight 
ซึ่งเป็นแบบพื้นฐานในการตรวจสอบ(checksum)ไฟล์ที่ถูกเก็บไว้ โดยไม่ต้องการเก็บข้อมูลอื่นๆเลย
การสร้าง lightweight tag ไม่ต้องใช้ออปชั่น  `-a`, `-s`, หรือ `-m` :

[source,console]
----
$ git tag v1.4-lw
$ git tag
v0.1
v1.3
v1.4
v1.4-lw
v1.5
----

ตอนนี้ถ้าคุณรันคำสั่ง `git show` คุณก็จะไม่เห็นข้อมูลอะไรพิเศษเลยนอกจากข้อมูลของ commit นั้น:

[source,console]
----
$ git show v1.4-lw
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the version number
----

==== การติดแท็กทีหลัง

คุณยังสามารถติดแท็กลงไปใน commit ที่ผ่านไปแล้วได้ ยกตัวอย่างเช่น ถ้าประวัติของ commit ของคุณเป็นแบบนี้:

[source,console]
----
$ git log --pretty=oneline
15027957951b64cf874c3557a0f3547bd83b3ff6 Merge branch 'experiment'
a6b4c97498bd301d84096da251c98a07c7723e65 beginning write support
0d52aaab4479697da7686c15f77a3d64d9165190 one more thing
6d52a271eda8725415634dd79daabbc4d9b6008e Merge branch 'experiment'
0b7434d86859cc7b8c3d5e1dddfed66ff742fcbc added a commit function
4682c3261057305bdd616e23b64b0857d832627b added a todo file
166ae0c4d3f420721acbb115cc33848dfcc2121a started write support
9fceb02d0ae598e95dc970b74767f19372d61af8 updated rakefile
964f16d36dfccde844893cac5b347e7b3d44abbc commit the todo
8a5cbc430f1a9c3d00faaeffd07798508422908a updated readme
----

ตอนนี้ สมมติว่าคุณลืมติดแท็ก v1.2 ให้โปรเจ็ค เมื่อตอนที่ commit ว่า ``updated rakefile''
Now, suppose you forgot to tag the project at v1.2, which was at the ``updated rakefile'' commit.
คุณสามารถเพิ่มแท็กไปที่ commit นั้นตรงๆ โดยระบุเลข checksum ลงไปเลย (หรือแค่บางส่วนก็ได้) ที่ท้ายคำสั่ง:

[source,console]
----
$ git tag -a v1.2 9fceb02
----

ทีนี้คุณก็จะได้เห็นแท็กของ commit นั้น:(((git commands, tag)))

[source,console]
----
$ git tag
v0.1
v1.2
v1.3
v1.4
v1.4-lw
v1.5

$ git show v1.2
tag v1.2
Tagger: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Feb 9 15:32:16 2009 -0800

version 1.2
commit 9fceb02d0ae598e95dc970b74767f19372d61af8
Author: Magnus Chacon <mchacon@gee-mail.com>
Date:   Sun Apr 27 20:43:35 2008 -0700

    updated rakefile
...
----

[[_sharing_tags]]
==== การแชร์แท็ก

โดยปกติ คำสั่ง `git push` จะไม่ส่งแท็กขึ้นไปบนรีโมทเซิร์ฟเวอร์
(((git commands, push)))
คุณจะต้อง push มันขึ้นไปเองตรงๆ เพื่อบอกเซิร์ฟเวอร์ให้รู้หลังจากที่คุณสร้างมันขึ้นมา
ขั้นตอนก็เหมือนกับการแชร์ branch โดยการใช้คำสั่ง
`git push origin [tagname]`.

[source,console]
----
$ git push origin v1.5
Counting objects: 14, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (12/12), done.
Writing objects: 100% (14/14), 2.05 KiB | 0 bytes/s, done.
Total 14 (delta 3), reused 0 (delta 0)
To git@github.com:schacon/simplegit.git
 * [new tag]         v1.5 -> v1.5
----

ถ้าคุณมีแท็กจำนวนมากที่ต้องการจะ push ในคราวเดียว คุณทำได้โดยใส่ออปชั่น `--tags` เข้าไปในคำสั่ง `git push`
แบบนี้มันจะส่งทุกๆแท็กที่คุณมีขึ้นไปบนรีโมทเซิร์ฟเวอร์ให้


[source,console]
----
$ git push origin --tags
Counting objects: 1, done.
Writing objects: 100% (1/1), 160 bytes | 0 bytes/s, done.
Total 1 (delta 0), reused 0 (delta 0)
To git@github.com:schacon/simplegit.git
 * [new tag]         v1.4 -> v1.4
 * [new tag]         v1.4-lw -> v1.4-lw
----

ทีนี้ เวลามีใครสักคน โคลน หรือ pull ของจาก  repo ของคุณ เขาก็จะได้รับแท็กทั้งหมดด้วย

==== Checking out Tags

คุณไม่สามารถ check out ไปที่แท็กได้จริงๆ เพราะมันขยับไปไหนไม่ได้เลย
*จากผู้แปล การแก้ไขข้อมูลที่ tag ในอดีต จะเกิดทางแยกของประวัติศาสตร์*

ถ้าคุณต้องการ push เวอร์ชั่นที่คุณทำงานอยู่ขึ้นไปตรงๆพร้อม แท็กแบบเฉพาะเจาะจง คุณสามารถสร้าง branch ใหม่ที่ แท็กของคุณได้เลย:

[source,console]
----
$ git checkout -b version2 v2.0.0
Switched to a new branch 'version2'
----

แน่นอนว่า ถ้าคุณทำแบบนี้ และ commit อะไรสักอย่างลงไปใน branch `version2` จะเกิดข้อแตกต่างนิดหน่อยเมื่อเทียบ จากแท็ก `v2.0.0`และมันจะเดินหน้าต่อไปในทางของมันเอง ดังนั้นโปรดระมัดระวังเมื่อจะทำแบบนี้
