[[_git_tagging]]
=== การติดแท็ก(tags)

(((tags)))
ก็ไม่ต่างจากระบบ VCSs อื่นๆ Git สามารถติดแท็กลงไปตรงจุดที่ต้องการโดยเฉพาะเพื่อระบุความสำคัญลงไปใน history
โดยปกติแล้ว เราจะใช้ฟังก์ชั่นนี้เพื่อ กำหนดจุดที่จะปล่อยของ(release) (v1.0 และอื่นๆ)
ทีนี้เราก็จะมาเรียนวิธีที่จะขอดูรายชื่อแท็ก วิธีสร้างแท็ก และความแตกต่างของแท็กว่ามีชนิดไหนบ้างกัน

==== แสดงรายการที่คุณแท็กไว้

การแสดงรายการแท็กใน Git ไม่อ้อมค้อมครับ แค่พิมพ์คำสั่ง
`git tag`:(((git commands, tag)))

[source,console]
----
$ git tag
v0.1
v1.3
----

คำสั่งนี้จะแสดงรายชื่อแท็กโดยเรียงตามตัวอักษร; โดยลำดับที่ปรากฎไม่ได้เรียกตามความสำคัญใดๆ

คุณสามารถค้นหาแท็กได้ด้วยการเจาะจงรูปแบบ เช่น ใน repo มีมากกว่า 500 แท็ก ถ้าคุณสนใจที่จะมองหาแถวๆลำดับที่ 1.8.5 คุณสามารถใช้คำสั่งดังนี้:

[source,console]
----
$ git tag -l 'v1.8.5*'
v1.8.5
v1.8.5-rc0
v1.8.5-rc1
v1.8.5-rc2
v1.8.5-rc3
v1.8.5.1
v1.8.5.2
v1.8.5.3
v1.8.5.4
v1.8.5.5
----

==== การสร้างแท็ก

ปกติ Git จะใช้แท็กอยู่สองชนิดหลักๆคือ  : lightweight และ annotated.

แท็กแบบ lightweight  จะเหมือนกับ branch มากซึ่งมันจะไม่มีการเปลี่ยนแปลง และมันเป็นแค่การกำหนดความสำคัญลงไปที่ commit นั้นๆ

แท็กแบบ Annotated จะเก็บทุก object ลงในฐานข้อมูลของ Git
==== การสร้างแท็ก

ปกติ Git จะใช้แท็กอยู่สองชนิดหลักๆคือ  : lightweight และ annotated.

แท็กแบบ lightweight  จะเหมือนกับ branch มากซึ่งมันจะไม่มีการเปลี่ยนแปลง และมันเป็นแค่การกำหนดความสำคัญลงไปที่ commit นั้นๆ

แท็กแบบ Annotated จะเก็บทุก object ลงในฐานข้อมูลของ Git
โดยมันจะถูก checksummed จากสิ่งที่ถูกเก็บไว้ ไม่ว่าจะเป็น ชื่อแท็ก อีเมล์ และวันที่ มีข้อความที่ติดแท็ก และสามารถลงนามและตรวจสอบได้ตามมาตรฐาน GPG
คำแนะนำโดยทั่วไป เมื่อคุณสร้าง annotated tags คุณสามารถเก็บรายละเอียดทั้งหมดนี้ไว้ได้ แต่ถ้าคุณต้องการติดแท็กแค่ชั่วคราว หรือด้วยเหตุผลอะไรก็ตามที่คุณไม่ต้องการเก็บข้อมูลอื่นๆเลย การใช้ lightweight tags น่าจะเป็นทางเลือกที่เหมาะสมกว่า

[[_annotated_tags]]
==== Annotated Tags

(((tags, annotated)))
Creating an annotated tag in Git is simple.
The easiest way is to specify `-a` when you run the `tag` command:(((git commands, tag)))

[source,console]
----
$ git tag -a v1.4 -m 'my version 1.4'
$ git tag
v0.1
v1.3
v1.4
----

The `-m` specifies a tagging message, which is stored with the tag.
If you don't specify a message for an annotated tag, Git launches your editor so you can type it in.

You can see the tag data along with the commit that was tagged by using the `git show` command:

[source,console]
----
$ git show v1.4
tag v1.4
Tagger: Ben Straub <ben@straub.cc>
Date:   Sat May 3 20:19:12 2014 -0700

my version 1.4

commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the version number
----

That shows the tagger information, the date the commit was tagged, and the annotation message before showing the commit information.

==== Lightweight Tags

(((tags, lightweight)))
Another way to tag commits is with a lightweight tag.
This is basically the commit checksum stored in a file – no other information is kept.
To create a lightweight tag, don't supply the `-a`, `-s`, or `-m` option:

[source,console]
----
$ git tag v1.4-lw
$ git tag
v0.1
v1.3
v1.4
v1.4-lw
v1.5
----

This time, if you run `git show` on the tag, you don't see the extra tag information.(((git commands, show)))
The command just shows the commit:

[source,console]
----
$ git show v1.4-lw
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the version number
----

==== Tagging Later

You can also tag commits after you've moved past them.
Suppose your commit history looks like this:

[source,console]
----
$ git log --pretty=oneline
15027957951b64cf874c3557a0f3547bd83b3ff6 Merge branch 'experiment'
a6b4c97498bd301d84096da251c98a07c7723e65 beginning write support
0d52aaab4479697da7686c15f77a3d64d9165190 one more thing
6d52a271eda8725415634dd79daabbc4d9b6008e Merge branch 'experiment'
0b7434d86859cc7b8c3d5e1dddfed66ff742fcbc added a commit function
4682c3261057305bdd616e23b64b0857d832627b added a todo file
166ae0c4d3f420721acbb115cc33848dfcc2121a started write support
9fceb02d0ae598e95dc970b74767f19372d61af8 updated rakefile
964f16d36dfccde844893cac5b347e7b3d44abbc commit the todo
8a5cbc430f1a9c3d00faaeffd07798508422908a updated readme
----

Now, suppose you forgot to tag the project at v1.2, which was at the ``updated rakefile'' commit.
You can add it after the fact.
To tag that commit, you specify the commit checksum (or part of it) at the end of the command:

[source,console]
----
$ git tag -a v1.2 9fceb02
----

You can see that you've tagged the commit:(((git commands, tag)))

[source,console]
----
$ git tag
v0.1
v1.2
v1.3
v1.4
v1.4-lw
v1.5

$ git show v1.2
tag v1.2
Tagger: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Feb 9 15:32:16 2009 -0800

version 1.2
commit 9fceb02d0ae598e95dc970b74767f19372d61af8
Author: Magnus Chacon <mchacon@gee-mail.com>
Date:   Sun Apr 27 20:43:35 2008 -0700

    updated rakefile
...
----

[[_sharing_tags]]
==== Sharing Tags

By default, the `git push` command doesn't transfer tags to remote servers.(((git commands, push)))
You will have to explicitly push tags to a shared server after you have created them.
This process is just like sharing remote branches – you can run `git push origin [tagname]`.

[source,console]
----
$ git push origin v1.5
Counting objects: 14, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (12/12), done.
Writing objects: 100% (14/14), 2.05 KiB | 0 bytes/s, done.
Total 14 (delta 3), reused 0 (delta 0)
To git@github.com:schacon/simplegit.git
 * [new tag]         v1.5 -> v1.5
----

If you have a lot of tags that you want to push up at once, you can also use the `--tags` option to the `git push` command.
This will transfer all of your tags to the remote server that are not already there.

[source,console]
----
$ git push origin --tags
Counting objects: 1, done.
Writing objects: 100% (1/1), 160 bytes | 0 bytes/s, done.
Total 1 (delta 0), reused 0 (delta 0)
To git@github.com:schacon/simplegit.git
 * [new tag]         v1.4 -> v1.4
 * [new tag]         v1.4-lw -> v1.4-lw
----

Now, when someone else clones or pulls from your repository, they will get all your tags as well.

==== Checking out Tags

You can't really check out a tag in Git, since they can't be moved around.
If you want to put a version of your repository in your working directory that looks like a specific tag, you can create a new branch at a specific tag:

[source,console]
----
$ git checkout -b version2 v2.0.0
Switched to a new branch 'version2'
----

Of course if you do this and do a commit, your `version2` branch will be slightly different than your `v2.0.0` tag since it will move forward with your new changes, so do be careful.
