[[_getting_a_repo]]
=== เริ่มจาก หนึ่ง repo

คุณสามารถได้ git repo มาด้วยวิธีหลักๆ สองวิธีคือ
หนึ่ง ไปเอาโปรเจ็คเก่าหรือไดเร็คทอรี่มา อิมพอร์ตเข้า git
หรือสอง โคลนมาจาก git repo ที่มีอยู่แล้วมาจากสักเซิร์ฟเวร์อนึง

==== การสร้าง repo ใน ไดเร็คทอรี่เก่า

ถ้าคุณจะเริ่ม ติดตาม(track) โปรเจคที่มีอยู่ด้วย git คุณต้องไปที่ไดเร็คทอรี่ที่โปรเจ็คนั้นอยู่แล้วก็พิมพ์ว่า

[source,console]
----
$ git init
----

มันจะสร้างไดเร็คทอรี่ย่อยที่ชื่อ `.git` เอาไว้เก็บทุกอย่างที่จำเป็นกับ repo หรือเรียกว่าโครงสร้างของ git repo ก็ได้
แต่ตอนนี้ของในโปรเจคจะยังไม่มีอะไรถูก track เลย
(ดูที่ <<_git_internals>> หากต้องการข้อมูลเพิ่มเติมว่าที่จริงแล้ว ไฟล์อะไรที่อยู่ใน `.git` ที่คุณเพิ่งสร้างมันขึ้นมาเมื่อครู่)(((git commands, init)))

ถ้าคุณต้องการเริ่มการทำ version-control กับไฟล์เดิมๆ (เมื่อเทียบกับไดเร็คทอรี่เปล่าๆ) คุณควรเริ่มกระบวนการติดตามไฟล์เหล่านั้น และ เริ่มทำสิ่งที่เรียกว่า commit
คุณสามารถทำสิ่งเหล่านี้ได้ด้วยคำสั่ง `git add` เพื่อเริ่มติดตามไฟล์ที่สนใจ ตามด้วยคำสั่ง `git commit`:

[source,console]
----
$ git add *.c
$ git add LICENSE
$ git commit -m 'initial project version'
----

ตอนนี้คุณมี git repo พร้อมกับไฟล์ที่ถูก track และ commit แล้ว

[[_git_cloning]]
==== การโคลน repo ที่ถูกสร้างไว้แล้ว

ถ้าคุณต้องการสำเนาจาก git repo ที่ถูกสร้างไว้แล้วสักอัน ตัวอย่างเช่น จากโปรเจ็คที่คุณต้องการเข้าร่วม คุณต้องใช้คำสั่ง `git clone`.
ถ้าคุณคุ้นเคยกับระบบ VCS มาก่อนเช่น Subversion คุณควรรู้ว่าคำสั่ง "clone" เทียบไม่ได้กับคำสั่ง "checkout"  มันมีความแตกต่างกันอย่างมากคือ แทนที่จะรับมาแค่สำเนาที่ต้องทำงาน git จะรับ สำเนาทั้งหมดจนเท่าที่จะเป็นไปได้มาจากเซิร์ฟเวอร์เท่าที่จะมีให้ โดยจะเอามาทุกเวอร์ชั่นของทุกไฟล์จากทุกประวัติศาสตร์ของโปรเจค เมื่อคุณรันคำสั่ง `git clone`.
ในความเป็นจริง ถ้าหากดิสก์บนเซิร์ฟเวอร์เกิดพังขึ้นมา คุณสามารถนำเวอร์ชั่นที่ใกล้เคียงจากใครก็ได้ที่ โคลนโปรเจ็คไปกลับมาคืนให้เซิร์ฟเวอร์ได้ โดยมันจะย้อนกลับไปที่สถานะเดียวกับเมื่อตอนที่ถูกโคลนไป (คุณอาจจะเสียบางอย่างที่เกี่ยวข้องกับฝั่งเซิร์ฟเวอร์ไปบ้าง แต่เวอร์ชั่นทั้งหมดของข้อมูลยังคงอยู่)
 – ดูที่ <<_git_on_the_server>> หากต้องการข้อมูลเพิ่มเติม).

คุณโคลน repo ได้ด้วยคำสั่ง `git clone [url]`.(((git commands, clone)))
ตัวอย่าง ถ้าคุณต้องการโคลน git ของ linkable library หรือเรียกว่า libgit2 คุณสามารถทำแบบนี้ได้:

[source,console]
----
$ git clone https://github.com/libgit2/libgit2
----

จากนั้นมันจะสร้างไดเร็คทอรี่ชื่อ ``libgit2'', initializes a ` พร้อมไดเร็คทอรี่ .git ข้างใน ดึงข้อมูลทั้งหมดจาก repo ลงมา และ check out ไปที่เวอร์ชั่นสุดท้ายให้
ถ้าคุณเข้าไปในไดเร็คทอรี่ `libgit2` ที่เพิ่งถูกสร้างนี้ คุณจะเห็นไฟล์ของโปรเจค พร้อมให้คุณทำงานทันที
ถ้าคุณต้องการโคลน repo เข้าไปในไดเร็คทอรี่ชื่ออื่นแทน ``libgit2'' คุณสามารถระบุมันลงไปในคำสั่งได้ตามนี้:

[source,console]
----
$ git clone https://github.com/libgit2/libgit2 mylibgit
----

คำสั่งนี้จะทำเหมือนคำสั่งก่อนหน้านี้ แต่ชื่อไดเร็คทอรี่จะเป็น `mylibgit` แทน

Git มีหลายโปรโตคอลให้ใช้ในการทรานส์เฟอร์ข้อมูล ที่ผ่านมาเราใช้ `https://` แต่คุณอาจจะใช้ `git://` หรือ `user@server:path/to/repo.git` หากต้องการใช้โปรโตคอล SSH แทน
<<_git_on_the_server>> จะนำเสนอตัวเลือกทั้งหมดที่เซิร์ฟเวอร์สามารถตั้งค่าการเข้าถึง git repo รวมถึงข้อดีข้อเสียของแต่ละวิธี
