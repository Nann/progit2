=== การบันทึกการเปลี่ยนแปลงใน repository

คุณมี repository สักหนึ่งตัว และทำสำเนามาแล้ว
ทีนี้คุณต้องการแก้ไขออะไรสักอย่างและ อยาก commit snapshots นั้นไว้ใน repository ทุกๆครั้งที่คุณต้องการ

จงจำไว้ว่าแต่ละไฟล์ในไดเรคทอรี่การทำงานนี้ สามารถมีได้ เพียงสถาวะเดียวจาก สอง สถาวะนี้คือ: tracked หรือ untracked
Tracked คือไฟล์ที่อยู่ใน snapshot สุดท้าย ซึ่งสามารถเป็น unmodified หรือ modified หรือ staged ก็ได้
Untracked คือไฟล์อื่นๆ ไฟล์ทั้งหมดในไดเรคทอรี่การทำงาน ที่ไม่ได้อยู่ใน snapshot สุดท้าย และไม่อยู่ใน staging ด้วย
เมื่อคุณโคลน repository มาครั้งแรก ทุกไฟล์จะเป็น tracked และ unmodified เพราะคุณเพิ่งจะเอามันลงมา และยังไม่ได้แก้ไขใดๆ

เมื่อคุณแก้ไขไฟล์ Git จะเห็นว่ามันเป็น modified เพราะว่าคุณแก้ไขมันไปจาก commit สุดท้าย
คุณก็นำพวกที่ modified นี้เข้า stage แล้วก็ commit ทั้งหมดที่เข้ามาใน stage และก็ทำวนเวียนไปเรื่อยๆเป็นวงจร

.วงจรชีวิตสถานะไฟล์ของคุณ.
image::images/lifecycle.png[The lifecycle of the status of your files.]

[[_checking_status]]
==== การตรวจสอบสถานะไฟล์ต่างๆของคุณ

เครื่องมือหลักๆสำหรับหาว่าไฟล์ไหนอยู่ในสถานะไหนก็คือคำสั่ง `git status` (((git commands, status)))
ถ้าคุณรันคำสั่งนี้ตรงๆหลังจากที่เพิ่งโคลนมา คุณจะเห็นบางอย่างคล้ายๆแบบนี้:

[source,console]
----
$ git status
On branch master
nothing to commit, working directory clean
----

นี่หมายความว่าคุณมีไดเร็คทอรี่ของการทำงานที่สะอาดสุดๆ หรืออีกนัยหนึ่งคือ ไม่มีไฟล์ไหนถูก track และ modified เลย
ในขณะเดียวกัน git ก็ยังไม่เห็นว่ามีไฟล์ไหนที่สถานะเป็น untracked หรือไม่มีรายการอะไรควรแสดงให้เห็น
สุดท้าย คำสั่งนี้ บอกคุณว่าคุณกำลังอยู่ที่ branch ไหน และแจ้งให้คุณทราบว่าไม่มีอะไรผิดแปลกไปจาก branch เดียวกันบน server
ซึ่งตอนนี้ branch นั้นยังคงเป็น ``master'' ซึ่งเป็นค่าตั้งต้น; คุณอย่าเพิ่งกังวลเรื่องนี้ <<_git_branching>> จะพาคุณไปดูเรื่อง branch และอธิบายรายละเอียดให้

สมมุติว่า คุณเพิ่มไฟล์ใหม่เข้ามาในโปรเจ็ค เอาง่ายๆเช่นไฟล์ README ถ้าไฟล์นี้ไม่เคยมีอยู่เดิม และคุณรันคำสั่ง`git status` คุณจะเห็นไฟล์ที่เป็น untracked แบบนี้:

[source,console]
----
$ echo 'My Project' > README
$ git status
On branch master
Untracked files:
  (use "git add <file>..." to include in what will be committed)

    README

nothing added to commit but untracked files present (use "git add" to track)
----

คุณจะเห็นว่าไฟล์ README ของคุณอยู่ในสถานะ untracked เพราะว่ามันถูกแสดงอยู่ใต้คำว่า ``Untracked files'' บนหน้าจอ
untracked โดยปกตินั้นหมายความว่า git เห็นว่าไฟล์นี้ ไม่มีใน snapshot ก่อนหน้านี้(commit); git จะไม่เริ่มต้นรวมไฟล์นี้ลงไปใน commit จนกว่าคุณจะบอกมันอย่างชัดเจนก่อน
ซึ่งมันทำแบบนี้เพื่อป้องกันอันตรายหากคุณไม่ได้ตั้งใจจะรวมเอาไฟล์ไบนารี่หรือไฟล์อะไรก็ไม่รู้เข้าไปด้วย สิ่งที่คุณต้องทำเมื่ออยากรวมไฟล์ README เอาละ เรามาเริ่ม track ไฟล์กันเลย

[[_tracking_files]]
==== การ track ไฟล์ใหม่

คำสั่งให้เริ่ม track ไฟล์ใหม่ ให้คุณใช้คำสั่ง `git add`.(((git commands, add)))
เพื่อเริ่ม track README คุณสามารถรันคำสั่งนี้เลย:

[source,console]
----
$ git add README
----

ถ้าคุณรันคำสั่ง status อีกที คุณจะเห็นว่าไฟล์ README ของคุณมีสถานะเป็น tracked และ staged เพื่อรอที่จะเป็น committed:

[source,console]
----
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    new file:   README

----

คุณบอกได้ว่าสถานะของมันเป็น staged แล้ว ก็เพราะมันถูกแสดงอยู่ใต้คำว่า “Changes to be committed” บนหัวมัน
ถ้าคุณ commit ที่จุดนี้เลย เวอร์ชั่นของไฟล์ ณ จุดที่คุณได้รันคำสั่ง git add จะกลายเป็นประวัติไปอยู่ใน snapshot
คุณอาจจะย้อนสถานะมันได้ถึง เมื่อตอนที่คุณได้รันคำสั่ง git init  เมื่อครู่นี้ และจากนั้นคุณได้รันคำสั่ง`git add (files)`  ซึ่งตอนนั้นเป็นการเริ่มการติดตามไฟล์ในไดเร็คทอรี่ของคุณแล้ว(((git commands, init)))(((git commands, add)))
คำสั่ง `git add` จะเก็บเอาชื่อพาร์ท รวมถึงไฟล์และไดเร็คทอรี่ไว้ ถุ้าสิ่งที่เพิ่มไว้เป็นไดเร็คทอรี่ คำสั่งจะเพิ่มไฟล์ทั้งหมดในไดเร็คทอรี่ให้เลย

==== การทำ stage modified

ลองเปลี่ยนแปลงไฟล์สักไฟล์ที่สถานะเป็น tracked
ถ้าคุณแก้ไขไฟล์ ``CONTRIBUTING.md'' ให้เปลี่ยนไปจาก tracked ก่อนหน้านี้ และรันคำสั่ง `git status` อีกครั้ง คุณจะได้ข้อความทำนองนี้:

[source,console]
----
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    new file:   README

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md

----

ไฟล์ ``CONTRIBUTING.md'' จะโผล่มาอยู่ภายใต้ส่วนของคำว่า ``Changed but not staged for commit'' ซึ่งหมายความว่าไฟล์นั้น สถานะเป็น tracked และกำลังถูกแก้ไขในไดเร็คทอรี่แต่ยังไม่เข้า stage
และเพื่อจะทำ stage มัน คุณลองรันคำสั่ง `git add`  ดู `git add` เป็นคำสั่งสารพัดประโยชน์ คุณสามารถใช้มันเพื่อ เริ่ม track ไฟล์ใหม่ หรือเพื่อ เริ่มนำไฟล์เข้า stage และเพื่อทำอะไรอย่างอื่นอีกเช่นเมื่อต้องทำ merge-conflict เสร็จแล้ว
มันอาจจะช่วยคุณได้มาก หากจะคิดว่าสิ่งนี้นั้นคือการ ``เพิ่มเนื้อหานี้เข้าไปใน commit ถัดไป'' มากกว่าที่จะคิดว่า ``เพิ่มไฟล์นี้เข้าไปในโปรเจค'' (((git commands, add)))
เอาละ มาลองรัน `git add` เลย เพื่อนำไฟล์ ``CONTRIBUTING.md'' เข้า stage จากนั้นรันคำสั่ง `git status` อีกครั้ง:

[source,console]
----
$ git add CONTRIBUTING.md
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    new file:   README
    modified:   CONTRIBUTING.md

----

ทั้งสองไฟล์เป็น staged แล้ว และกำลังก้าวเข้าสู่ commit ถัดไป
ณ จุดนี้ สมมุติว่าคุณเพิ่งนึกขึ้นได้ว่าอยากจะแก้ไขอะไรอีกนิดหน่อยใน `CONTRIBUTING.md` ก่อนที่จะ commit มัน
คุณเปิดไฟล์ขึ้นมาอีกครั้งและแก้ไขมัน จากนั้นคุณพร้อมที่จะ commit แล้ว
ไม่ว่าจะอย่างไรก็ตาม ลองรันคำสั่ง `git status` อีกสักที:

[source,console]
----
$ vim CONTRIBUTING.md
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    new file:   README
    modified:   CONTRIBUTING.md

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md

----

อะไรฟะ?
ตอนนี้ มันถูกแสดงว่ามีสองสถานะคือ staged และ unstaged
มันเป็นงี้ได้ไง?
มันกลายเป็นว่า stage ของไฟล์เป็นตามที่คุณรันคำสั่ง `git add`
ถ้าคุณ commit ตอนนี้ เวอร์ชั่นของ `CONTRIBUTING.md` คือไฟล์เมื่อตอนที่คุณรัน `git add` ซึ่งคือของที่จะไปสู่การ commit, ไม่ใช่เวอร์ชั่นที่คุณเห็นจริงๆในไดเรคทอรี่เมื่อตอนที่คุณรัน `git commit`
ถ้าคุณแก้ไขไฟล์หลังจากที่คุณรันคำสั่ง `git add` คุณต้องรัน `git add` อีกที เพื่อนำเวอร์ชั่นสุดท้ายของไฟล์เข้า stage:

[source,console]
----
$ git add CONTRIBUTING.md
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    new file:   README
    modified:   CONTRIBUTING.md
----

==== สถานะแบบย่อ

เมื่อผลลัพธ์ของคำสั่ง `git status` นั้นครอบคลุมทุกสิ่งอย่าง แต่มันก็ยังเวิ่นเว้อมากไป Git ก็เลยมีเครื่องหมายการแสดงสถานะอย่างย่อไว้ให้ด้วย เพื่อให้คุณเห็นการเปลี่ยนแปลงในรูปแบบกระทัดรัด
ถ้าคุณรัน  `git status -s` หรือ `git status --short` คุณจะได้ผลลัพธ์ที่ดูง่ายจากคำสั่งนี้

[source,console]
----
$ git status -s
 M README
MM Rakefile
A  lib/git.rb
M  lib/simplegit.rb
?? LICENSE.txt
----

modified จะมี  `M` โดยแสดงเป็น สองคอลัมน์ ซึ่งทางซ้ายบอก stage ของไฟล์ และทางขวาคือของที่ถูกแก้ไข ดังตัวอย่างที่แสดงมานี้ ไฟล์ `README` ถูกแก้ไขแล้วในไดเรคทอรี่ แต่ยังไม่เข้า stage ในขณะที่  `lib/simplegit.rb ถูกแก้ไขและเข้า stage แล้ว ส่วน  `Rakefile` เคยถูกแก้ไข เข้า stage แล้ว และถูกแก้ไขอีกครั้ง ดังนั้นสถานะการเปลี่ยนแปลงของมันจึงมีสองอย่างคือ staged และ unstaged

[[_ignoring]]
==== การละเว้นไฟล์ใดๆ

บ่อยครั้ง คุณอาจจะมีคลาสหรือไฟล์ที่คุณไม่อยากให้ git เพิ่มให้โดยอัตโนมัติ หรือ ไม่อยากให้โชว์เป็น untracked
ซึ่งโดยปกติจะเป็นไฟล์ที่ถูกสร้างขั้นมาเองเช่น log ไฟล์ หรือไฟล์ที่ถูกสร้างโดยระบบ
ในกรณีนี้ คุณสามารถสร้างไฟล์สำหรับใส่รูปแบบไฟล์พวกนี้ไว้ใน `.gitignore`.(((ignoring files)))
นี่คือตัวอย่างไฟล์ `.gitignore`:

[source,console]
----
$ cat .gitignore
*.[oa]
*~
----

ในบรรทัดแรก คือการบอกให้ git ละเว้นไฟล์ใดๆก็ตามที่ลงท้ายด้วย  ``.o'' หรือ  ``.a'' ซึ่งอาจจะเป็น ออปเจ็ค และ archive file ที่เกิดจากการที่คุณ building โค้ดของคุณ
บรรทัดที่สอง คือการบอกให้ git ละเว้นทุกไฟล์ที่ลงท้ายด้วยสัญลักษณ์ (~) ซึ่งมันถูกใช้จากหลายๆ text editor เช่น Emacs เพื่อสร้าง temporary files
คุณอาจจะเพิ่ม log หรือ tmp หรือ pid เข้าไปด้วย รวมทั้งพวกเอกสารที่ถูกสร้างขึ้นมาเองทั้งหลาย ดังนั้น จงทำ .gitignore ขั้นมาก่อนที่คุณจะไปมีไอเดียบรรเจิด เพื่อที่คุณจะไม่ต้องเจอเหตุไม่คาดฝัน เวลา commit ไฟล์ที่จะไม่ต้องการมันจริงๆใน repository ของคุณ

กฎของรูปแบบต่างๆที่คุณจะใส่ลงไปใน `.gitignore` ได้มีดังนี้:

*  บรรทัดที่ว่าง หรือบรรทัดที่เริ่มต้นด้วย`#` จะถูกละเว้นไปเลย
*  รูปแบบสากลนั้นใช้ได้เลย
*  คุณสามารถจบรูปแบบด้วย ('/') สำหรับเจาะจงไปที่ไดเร็คทอรี่
*  สามารถใช้ การปฏิเสธรูปแบบด้วยการเริ่มต้นด้วยเครื่องหมาย ('!')

รูปแบบสากลก็คล้ายๆ regular ecpressions ที่เชลล์ใช้นั่นแหล่ะ
เช่น สัญลักษณ์ (`*`) ตรงกับอักษร ศูนย์ตัว หรือมากกว่านั้น `[abc]` ตรงกับอักษรใดๆภายในเครื่องหมายก้ามปู (ในที่นี้คือ a, b หรือ c) เครื่องหมายคำถาม (`?`) ตรงกับอักษรใดๆหนึ่งตัว และเครื่องหมายก้ามปูครอบไว้ด้วยอักษรที่มี เครื่องหมายลบคั่นกลาง (`[0-9]`) ตรงกับอักษรใดๆระหว่างนั้น (ในที่นี้คือ 0 ถึง 9)
คุณสามารถใช้สัญลักษณ์สองตัวเพื่ออ้างถึง ได้เรคทอรี่ซ้อนกันได้  `a/**/z` สามารถแทน `a/z`, `a/b/z`, `a/b/c/z`, หรืออื่นๆได้ด้วย

ต่อไปนี้คืออีกตัวอย่างของไฟล์ .gitignore:

[source]
----
# no .a files
*.a

# but do track lib.a, even though you're ignoring .a files above
!lib.a

# only ignore the root TODO file, not subdir/TODO
/TODO

# ignore all files in the build/ directory
build/

# ignore doc/notes.txt, but not doc/server/arch.txt
doc/*.txt

# ignore all .txt files in the doc/ directory
doc/**/*.txt
----

[เคล็ดลับ]
====
GitHub เขามีรายการของ `.gitignore` ที่ทำไว้ดีแล้ว นับเป็นโหลๆของภาษาต่างๆ ที่ https://github.com/github/gitignore[] ถ้าคุณต้องการนำมาเริ่มในโปรเจคของคุณ
====

[[_git_diff_staged]]
==== Viewing Your Staged and Unstaged Changes

If the `git status` command is too vague for you – you want to know exactly what you changed, not just which files were changed – you can use the `git diff` command.(((git commands, diff)))
We'll cover `git diff` in more detail later, but you'll probably use it most often to answer these two questions: What have you changed but not yet staged?
And what have you staged that you are about to commit?
Although `git status` answers those questions very generally by listing the file names, `git diff` shows you the exact lines added and removed – the patch, as it were.

Let's say you edit and stage the `README` file again and then edit the `CONTRIBUTING.md` file without staging it.
If you run your `git status` command, you once again see something like this:

[source,console]
----
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    new file:   README

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md
----

To see what you've changed but not yet staged, type `git diff` with no other arguments:

[source,console]
----
$ git diff
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index 8ebb991..643e24f 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -65,7 +65,8 @@ branch directly, things can get messy.
 Please include a nice description of your changes when you submit your PR;
 if we have to read the whole diff to figure out why you're contributing
 in the first place, you're less likely to get feedback and have your change
-merged in.
+merged in. Also, split your changes into comprehensive chunks if you patch is
+longer than a dozen lines.

 If you are starting to work on a particular area, feel free to submit a PR
 that highlights your work in progress (and note in the PR title that it's
----

That command compares what is in your working directory with what is in your staging area.
The result tells you the changes you've made that you haven't yet staged.

If you want to see what you've staged that will go into your next commit, you can use `git diff --staged`.
This command compares your staged changes to your last commit:

[source,console]
----
$ git diff --staged
diff --git a/README b/README
new file mode 100644
index 0000000..03902a1
--- /dev/null
+++ b/README
@@ -0,0 +1 @@
+My Project
----

It's important to note that `git diff` by itself doesn't show all changes made since your last commit – only changes that are still unstaged.
This can be confusing, because if you've staged all of your changes, `git diff` will give you no output.

For another example, if you stage the `CONTRIBUTING.md` file and then edit it, you can use `git diff` to see the changes in the file that are staged and the changes that are unstaged. If our environment looks like this:

[source,console]
----
$ git add CONTRIBUTING.md
$ echo 'test line' >> CONTRIBUTING.md
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    modified:   CONTRIBUTING.md

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md
----

Now you can use `git diff` to see what is still unstaged

[source,console]
----
$ git diff
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index 643e24f..87f08c8 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -119,3 +119,4 @@ at the
 ## Starter Projects

 See our [projects list](https://github.com/libgit2/libgit2/blob/development/PROJECTS.md).
+# test line
----

and `git diff --cached` to see what you've staged so far (--staged and --cached are synonyms):

[source,console]
----
$ git diff --cached
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index 8ebb991..643e24f 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -65,7 +65,8 @@ branch directly, things can get messy.
 Please include a nice description of your changes when you submit your PR;
 if we have to read the whole diff to figure out why you're contributing
 in the first place, you're less likely to get feedback and have your change
-merged in.
+merged in. Also, split your changes into comprehensive chunks if you patch is
+longer than a dozen lines.

 If you are starting to work on a particular area, feel free to submit a PR
 that highlights your work in progress (and note in the PR title that it's
----

[NOTE]
.Git Diff in an External Tool
====
We will continue to use the `git diff` command in various ways throughout the rest of the book. There is another way to look at these diffs if you prefer a graphical or external diff viewing program instead. If you run `git difftool` instead of `git diff`, you can view any of these diffs in software like Araxis, emerge, vimdiff and more. Run `git difftool --tool-help` to see what is available on your system.
====

[[_committing_changes]]
==== Committing Your Changes

Now that your staging area is set up the way you want it, you can commit your changes.
Remember that anything that is still unstaged – any files you have created or modified that you haven't run `git add` on since you edited them – won't go into this commit.
They will stay as modified files on your disk.
In this case, let's say that the last time you ran `git status`, you saw that everything was staged, so you're ready to commit your changes.(((git commands, status)))
The simplest way to commit is to type `git commit`:(((git commands, commit)))

[source,console]
----
$ git commit
----

Doing so launches your editor of choice.
(This is set by your shell's `$EDITOR` environment variable – usually vim or emacs, although you can configure it with whatever you want using the `git config --global core.editor` command as you saw in <<_getting_started>>).(((editor, changing default)))(((git commands, config)))

The editor displays the following text (this example is a Vim screen):

[source]
----

# Please enter the commit message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.
# On branch master
# Changes to be committed:
#	new file:   README
#	modified:   CONTRIBUTING.md
#
~
~
~
".git/COMMIT_EDITMSG" 9L, 283C
----

You can see that the default commit message contains the latest output of the `git status` command commented out and one empty line on top.
You can remove these comments and type your commit message, or you can leave them there to help you remember what you're committing.
(For an even more explicit reminder of what you've modified, you can pass the `-v` option to `git commit`.
Doing so also puts the diff of your change in the editor so you can see exactly what changes you're committing.)
When you exit the editor, Git creates your commit with that commit message (with the comments and diff stripped out).

Alternatively, you can type your commit message inline with the `commit` command by specifying it after a -m flag, like this:

[source,console]
----
$ git commit -m "Story 182: Fix benchmarks for speed"
[master 463dc4f] Story 182: Fix benchmarks for speed
 2 files changed, 2 insertions(+)
 create mode 100644 README
----

Now you've created your first commit!
You can see that the commit has given you some output about itself: which branch you committed to (`master`), what SHA-1 checksum the commit has (`463dc4f`), how many files were changed, and statistics about lines added and removed in the commit.

Remember that the commit records the snapshot you set up in your staging area.
Anything you didn't stage is still sitting there modified; you can do another commit to add it to your history.
Every time you perform a commit, you're recording a snapshot of your project that you can revert to or compare to later.

==== Skipping the Staging Area

(((staging area, skipping)))
Although it can be amazingly useful for crafting commits exactly how you want them, the staging area is sometimes a bit more complex than you need in your workflow.
If you want to skip the staging area, Git provides a simple shortcut.
Adding the `-a` option to the `git commit` command makes Git automatically stage every file that is already tracked before doing the commit, letting you skip the `git add` part:

[source,console]
----
$ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md

no changes added to commit (use "git add" and/or "git commit -a")
$ git commit -a -m 'added new benchmarks'
[master 83e38c7] added new benchmarks
 1 file changed, 5 insertions(+), 0 deletions(-)
----

Notice how you don't have to run `git add` on the ``CONTRIBUTING.md'' file in this case before you commit.

[[_removing_files]]
==== Removing Files

(((files, removing)))
To remove a file from Git, you have to remove it from your tracked files (more accurately, remove it from your staging area) and then commit.
The `git rm` command does that, and also removes the file from your working directory so you don't see it as an untracked file the next time around.

If you simply remove the file from your working directory, it shows up under the ``Changed but not updated'' (that is, _unstaged_) area of your `git status` output:

[source,console]
----
$ rm PROJECTS.md
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes not staged for commit:
  (use "git add/rm <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        deleted:    PROJECTS.md

no changes added to commit (use "git add" and/or "git commit -a")
----

Then, if you run `git rm`, it stages the file's removal:

[source,console]
----
$ git rm PROJECTS.md
rm 'PROJECTS.md'
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    deleted:    PROJECTS.md
----

The next time you commit, the file will be gone and no longer tracked.
If you modified the file and added it to the index already, you must force the removal with the `-f` option.
This is a safety feature to prevent accidental removal of data that hasn't yet been recorded in a snapshot and that can't be recovered from Git.

Another useful thing you may want to do is to keep the file in your working tree but remove it from your staging area.
In other words, you may want to keep the file on your hard drive but not have Git track it anymore.
This is particularly useful if you forgot to add something to your `.gitignore` file and accidentally staged it, like a large log file or a bunch of `.a` compiled files.
To do this, use the `--cached` option:

[source,console]
----
$ git rm --cached README
----

You can pass files, directories, and file-glob patterns to the `git rm` command.
That means you can do things such as

[source,console]
----
$ git rm log/\*.log
----

Note the backslash (`\`) in front of the `*`.
This is necessary because Git does its own filename expansion in addition to your shell's filename expansion.
This command removes all files that have the `.log` extension in the `log/` directory.
Or, you can do something like this:

[source,console]
----
$ git rm \*~
----

This command removes all files that end with `~`.

[[_git_mv]]
==== Moving Files

(((files, moving)))
Unlike many other VCS systems, Git doesn't explicitly track file movement.
If you rename a file in Git, no metadata is stored in Git that tells it you renamed the file.
However, Git is pretty smart about figuring that out after the fact – we'll deal with detecting file movement a bit later.

Thus it's a bit confusing that Git has a `mv` command.
If you want to rename a file in Git, you can run something like

[source,console]
----
$ git mv file_from file_to
----

and it works fine.
In fact, if you run something like this and look at the status, you'll see that Git considers it a renamed file:

[source,console]
----
$ git mv README.md README
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    renamed:    README.md -> README
----

However, this is equivalent to running something like this:

[source,console]
----
$ mv README.md README
$ git rm README.md
$ git add README
----

Git figures out that it's a rename implicitly, so it doesn't matter if you rename a file that way or with the `mv` command.
The only real difference is that `mv` is one command instead of three – it's a convenience function.
More important, you can use any tool you like to rename a file, and address the add/rm later, before you commit.
