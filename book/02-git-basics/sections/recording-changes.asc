=== การบันทึกการเปลี่ยนแปลงใน repository

คุณมี repository สักหนึ่งตัว และทำสำเนามาแล้ว
ทีนี้คุณต้องการแก้ไขออะไรสักอย่างและ อยาก commit snapshots นั้นไว้ใน repository ทุกๆครั้งที่คุณต้องการ

จงจำไว้ว่าแต่ละไฟล์ในไดเรคทอรี่การทำงานนี้ สามารถมีได้ เพียงสถาวะเดียวจาก สอง สถาวะนี้คือ: tracked หรือ untracked
Tracked คือไฟล์ที่อยู่ใน snapshot สุดท้าย ซึ่งสามารถเป็น unmodified หรือ modified หรือ staged ก็ได้
Untracked คือไฟล์อื่นๆ ไฟล์ทั้งหมดในไดเรคทอรี่การทำงาน ที่ไม่ได้อยู่ใน snapshot สุดท้าย และไม่อยู่ใน staging ด้วย
เมื่อคุณโคลน repository มาครั้งแรก ทุกไฟล์จะเป็น tracked และ unmodified เพราะคุณเพิ่งจะเอามันลงมา และยังไม่ได้แก้ไขใดๆ

เมื่อคุณแก้ไขไฟล์ Git จะเห็นว่ามันเป็น modified เพราะว่าคุณแก้ไขมันไปจาก commit สุดท้าย
คุณก็นำพวกที่ modified นี้เข้า stage แล้วก็ commit ทั้งหมดที่เข้ามาใน stage และก็ทำวนเวียนไปเรื่อยๆเป็นวงจร

.วงจรชีวิตสถานะไฟล์ของคุณ.
image::images/lifecycle.png[The lifecycle of the status of your files.]

[[_checking_status]]
==== การตรวจสอบสถานะไฟล์ต่างๆของคุณ

เครื่องมือหลักๆสำหรับหาว่าไฟล์ไหนอยู่ในสถานะไหนก็คือคำสั่ง `git status` (((git commands, status)))
ถ้าคุณรันคำสั่งนี้ตรงๆหลังจากที่เพิ่งโคลนมา คุณจะเห็นบางอย่างคล้ายๆแบบนี้:

[source,console]
----
$ git status
On branch master
nothing to commit, working directory clean
----

นี่หมายความว่าคุณมีไดเร็คทอรี่ของการทำงานที่สะอาดสุดๆ หรืออีกนัยหนึ่งคือ ไม่มีไฟล์ไหนถูก track และ modified เลย
ในขณะเดียวกัน git ก็ยังไม่เห็นว่ามีไฟล์ไหนที่สถานะเป็น untracked หรือไม่มีรายการอะไรควรแสดงให้เห็น
สุดท้าย คำสั่งนี้ บอกคุณว่าคุณกำลังอยู่ที่ branch ไหน และแจ้งให้คุณทราบว่าไม่มีอะไรผิดแปลกไปจาก branch เดียวกันบน server
ซึ่งตอนนี้ branch นั้นยังคงเป็น ``master'' ซึ่งเป็นค่าตั้งต้น; คุณอย่าเพิ่งกังวลเรื่องนี้ <<_git_branching>> จะพาคุณไปดูเรื่อง branch และอธิบายรายละเอียดให้

สมมุติว่า คุณเพิ่มไฟล์ใหม่เข้ามาในโปรเจ็ค เอาง่ายๆเช่นไฟล์ README ถ้าไฟล์นี้ไม่เคยมีอยู่เดิม และคุณรันคำสั่ง`git status` คุณจะเห็นไฟล์ที่เป็น untracked แบบนี้:

[source,console]
----
$ echo 'My Project' > README
$ git status
On branch master
Untracked files:
  (use "git add <file>..." to include in what will be committed)

    README

nothing added to commit but untracked files present (use "git add" to track)
----

คุณจะเห็นว่าไฟล์ README ของคุณอยู่ในสถานะ untracked เพราะว่ามันถูกแสดงอยู่ใต้คำว่า ``Untracked files'' บนหน้าจอ
untracked โดยปกตินั้นหมายความว่า git เห็นว่าไฟล์นี้ ไม่มีใน snapshot ก่อนหน้านี้(commit); git จะไม่เริ่มต้นรวมไฟล์นี้ลงไปใน commit จนกว่าคุณจะบอกมันอย่างชัดเจนก่อน
ซึ่งมันทำแบบนี้เพื่อป้องกันอันตรายหากคุณไม่ได้ตั้งใจจะรวมเอาไฟล์ไบนารี่หรือไฟล์อะไรก็ไม่รู้เข้าไปด้วย สิ่งที่คุณต้องทำเมื่ออยากรวมไฟล์ README เอาละ เรามาเริ่ม track ไฟล์กันเลย

[[_tracking_files]]
==== การ track ไฟล์ใหม่

คำสั่งให้เริ่ม track ไฟล์ใหม่ ให้คุณใช้คำสั่ง `git add`.(((git commands, add)))
เพื่อเริ่ม track README คุณสามารถรันคำสั่งนี้เลย:

[source,console]
----
$ git add README
----

ถ้าคุณรันคำสั่ง status อีกที คุณจะเห็นว่าไฟล์ README ของคุณมีสถานะเป็น tracked และ staged เพื่อรอที่จะเป็น committed:

[source,console]
----
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    new file:   README

----

คุณบอกได้ว่าสถานะของมันเป็น staged แล้ว ก็เพราะมันถูกแสดงอยู่ใต้คำว่า “Changes to be committed” บนหัวมัน
ถ้าคุณ commit ที่จุดนี้เลย เวอร์ชั่นของไฟล์ ณ จุดที่คุณได้รันคำสั่ง git add จะกลายเป็นประวัติไปอยู่ใน snapshot
คุณอาจจะย้อนสถานะมันได้ถึง เมื่อตอนที่คุณได้รันคำสั่ง git init  เมื่อครู่นี้ และจากนั้นคุณได้รันคำสั่ง`git add (files)`  ซึ่งตอนนั้นเป็นการเริ่มการติดตามไฟล์ในไดเร็คทอรี่ของคุณแล้ว(((git commands, init)))(((git commands, add)))
คำสั่ง `git add` จะเก็บเอาชื่อพาร์ท รวมถึงไฟล์และไดเร็คทอรี่ไว้ ถุ้าสิ่งที่เพิ่มไว้เป็นไดเร็คทอรี่ คำสั่งจะเพิ่มไฟล์ทั้งหมดในไดเร็คทอรี่ให้เลย

==== การทำ stage modified

ลองเปลี่ยนแปลงไฟล์สักไฟล์ที่สถานะเป็น tracked
ถ้าคุณแก้ไขไฟล์ ``CONTRIBUTING.md'' ให้เปลี่ยนไปจาก tracked ก่อนหน้านี้ และรันคำสั่ง `git status` อีกครั้ง คุณจะได้ข้อความทำนองนี้:

[source,console]
----
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    new file:   README

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md

----

ไฟล์ ``CONTRIBUTING.md'' จะโผล่มาอยู่ภายใต้ส่วนของคำว่า ``Changed but not staged for commit'' ซึ่งหมายความว่าไฟล์นั้น สถานะเป็น tracked และกำลังถูกแก้ไขในไดเร็คทอรี่แต่ยังไม่เข้า stage
และเพื่อจะทำ stage มัน คุณลองรันคำสั่ง `git add`  ดู `git add` เป็นคำสั่งสารพัดประโยชน์ คุณสามารถใช้มันเพื่อ เริ่ม track ไฟล์ใหม่ หรือเพื่อ เริ่มนำไฟล์เข้า stage และเพื่อทำอะไรอย่างอื่นอีกเช่นเมื่อต้องทำ merge-conflict เสร็จแล้ว
มันอาจจะช่วยคุณได้มาก หากจะคิดว่าสิ่งนี้นั้นคือการ ``เพิ่มเนื้อหานี้เข้าไปใน commit ถัดไป'' มากกว่าที่จะคิดว่า ``เพิ่มไฟล์นี้เข้าไปในโปรเจค'' (((git commands, add)))
เอาละ มาลองรัน `git add` เลย เพื่อนำไฟล์ ``CONTRIBUTING.md'' เข้า stage จากนั้นรันคำสั่ง `git status` อีกครั้ง:

[source,console]
----
$ git add CONTRIBUTING.md
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    new file:   README
    modified:   CONTRIBUTING.md

----

ทั้งสองไฟล์เป็น staged แล้ว และกำลังก้าวเข้าสู่ commit ถัดไป
ณ จุดนี้ สมมุติว่าคุณเพิ่งนึกขึ้นได้ว่าอยากจะแก้ไขอะไรอีกนิดหน่อยใน `CONTRIBUTING.md` ก่อนที่จะ commit มัน
คุณเปิดไฟล์ขึ้นมาอีกครั้งและแก้ไขมัน จากนั้นคุณพร้อมที่จะ commit แล้ว
ไม่ว่าจะอย่างไรก็ตาม ลองรันคำสั่ง `git status` อีกสักที:

[source,console]
----
$ vim CONTRIBUTING.md
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    new file:   README
    modified:   CONTRIBUTING.md

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md

----

อะไรฟะ?
ตอนนี้ มันถูกแสดงว่ามีสองสถานะคือ staged และ unstaged
มันเป็นงี้ได้ไง?
มันกลายเป็นว่า stage ของไฟล์เป็นตามที่คุณรันคำสั่ง `git add`
ถ้าคุณ commit ตอนนี้ เวอร์ชั่นของ `CONTRIBUTING.md` คือไฟล์เมื่อตอนที่คุณรัน `git add` ซึ่งคือของที่จะไปสู่การ commit, ไม่ใช่เวอร์ชั่นที่คุณเห็นจริงๆในไดเรคทอรี่เมื่อตอนที่คุณรัน `git commit`
ถ้าคุณแก้ไขไฟล์หลังจากที่คุณรันคำสั่ง `git add` คุณต้องรัน `git add` อีกที เพื่อนำเวอร์ชั่นสุดท้ายของไฟล์เข้า stage:

[source,console]
----
$ git add CONTRIBUTING.md
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    new file:   README
    modified:   CONTRIBUTING.md
----

==== สถานะแบบย่อ

เมื่อผลลัพธ์ของคำสั่ง `git status` นั้นครอบคลุมทุกสิ่งอย่าง แต่มันก็ยังเวิ่นเว้อมากไป Git ก็เลยมีเครื่องหมายการแสดงสถานะอย่างย่อไว้ให้ด้วย เพื่อให้คุณเห็นการเปลี่ยนแปลงในรูปแบบกระทัดรัด
ถ้าคุณรัน  `git status -s` หรือ `git status --short` คุณจะได้ผลลัพธ์ที่ดูง่ายจากคำสั่งนี้

[source,console]
----
$ git status -s
 M README
MM Rakefile
A  lib/git.rb
M  lib/simplegit.rb
?? LICENSE.txt
----

modified จะมี  `M` โดยแสดงเป็น สองคอลัมน์ ซึ่งทางซ้ายบอก stage ของไฟล์ และทางขวาคือของที่ถูกแก้ไข ดังตัวอย่างที่แสดงมานี้ ไฟล์ `README` ถูกแก้ไขแล้วในไดเรคทอรี่ แต่ยังไม่เข้า stage ในขณะที่  `lib/simplegit.rb ถูกแก้ไขและเข้า stage แล้ว ส่วน  `Rakefile` เคยถูกแก้ไข เข้า stage แล้ว และถูกแก้ไขอีกครั้ง ดังนั้นสถานะการเปลี่ยนแปลงของมันจึงมีสองอย่างคือ staged และ unstaged

[[_ignoring]]
==== การละเว้นไฟล์ใดๆ

บ่อยครั้ง คุณอาจจะมีคลาสหรือไฟล์ที่คุณไม่อยากให้ git เพิ่มให้โดยอัตโนมัติ หรือ ไม่อยากให้โชว์เป็น untracked
ซึ่งโดยปกติจะเป็นไฟล์ที่ถูกสร้างขั้นมาเองเช่น log ไฟล์ หรือไฟล์ที่ถูกสร้างโดยระบบ
ในกรณีนี้ คุณสามารถสร้างไฟล์สำหรับใส่รูปแบบไฟล์พวกนี้ไว้ใน `.gitignore`.(((ignoring files)))
นี่คือตัวอย่างไฟล์ `.gitignore`:

[source,console]
----
$ cat .gitignore
*.[oa]
*~
----

ในบรรทัดแรก คือการบอกให้ git ละเว้นไฟล์ใดๆก็ตามที่ลงท้ายด้วย  ``.o'' หรือ  ``.a'' ซึ่งอาจจะเป็น ออปเจ็ค และ archive file ที่เกิดจากการที่คุณ building โค้ดของคุณ
บรรทัดที่สอง คือการบอกให้ git ละเว้นทุกไฟล์ที่ลงท้ายด้วยสัญลักษณ์ (~) ซึ่งมันถูกใช้จากหลายๆ text editor เช่น Emacs เพื่อสร้าง temporary files
คุณอาจจะเพิ่ม log หรือ tmp หรือ pid เข้าไปด้วย รวมทั้งพวกเอกสารที่ถูกสร้างขึ้นมาเองทั้งหลาย ดังนั้น จงทำ .gitignore ขั้นมาก่อนที่คุณจะไปมีไอเดียบรรเจิด เพื่อที่คุณจะไม่ต้องเจอเหตุไม่คาดฝัน เวลา commit ไฟล์ที่จะไม่ต้องการมันจริงๆใน repository ของคุณ

กฎของรูปแบบต่างๆที่คุณจะใส่ลงไปใน `.gitignore` ได้มีดังนี้:

*  บรรทัดที่ว่าง หรือบรรทัดที่เริ่มต้นด้วย`#` จะถูกละเว้นไปเลย
*  รูปแบบสากลนั้นใช้ได้เลย
*  คุณสามารถจบรูปแบบด้วย ('/') สำหรับเจาะจงไปที่ไดเร็คทอรี่
*  สามารถใช้ การปฏิเสธรูปแบบด้วยการเริ่มต้นด้วยเครื่องหมาย ('!')

รูปแบบสากลก็คล้ายๆ regular ecpressions ที่เชลล์ใช้นั่นแหล่ะ
เช่น สัญลักษณ์ (`*`) ตรงกับอักษร ศูนย์ตัว หรือมากกว่านั้น `[abc]` ตรงกับอักษรใดๆภายในเครื่องหมายก้ามปู (ในที่นี้คือ a, b หรือ c) เครื่องหมายคำถาม (`?`) ตรงกับอักษรใดๆหนึ่งตัว และเครื่องหมายก้ามปูครอบไว้ด้วยอักษรที่มี เครื่องหมายลบคั่นกลาง (`[0-9]`) ตรงกับอักษรใดๆระหว่างนั้น (ในที่นี้คือ 0 ถึง 9)
คุณสามารถใช้สัญลักษณ์สองตัวเพื่ออ้างถึง ได้เรคทอรี่ซ้อนกันได้  `a/**/z` สามารถแทน `a/z`, `a/b/z`, `a/b/c/z`, หรืออื่นๆได้ด้วย

ต่อไปนี้คืออีกตัวอย่างของไฟล์ .gitignore:

[source]
----
# no .a files
*.a

# but do track lib.a, even though you're ignoring .a files above
!lib.a

# only ignore the root TODO file, not subdir/TODO
/TODO

# ignore all files in the build/ directory
build/

# ignore doc/notes.txt, but not doc/server/arch.txt
doc/*.txt

# ignore all .txt files in the doc/ directory
doc/**/*.txt
----

[เคล็ดลับ]
====
GitHub เขามีรายการของ `.gitignore` ที่ทำไว้ดีแล้ว นับเป็นโหลๆของภาษาต่างๆ ที่ https://github.com/github/gitignore[] ถ้าคุณต้องการนำมาเริ่มในโปรเจคของคุณ
====

[[_git_diff_staged]]
==== การดูว่าแก้ไขอะไรไปใน Staged และ Unstaged

ถ้าคำสั่ง `git status` มันคลุมเครือเกินไปสำหรับคุณแล้วละก็ คุณจำเป็นต้องรู้ให้ได้จริงๆว่าคุณแก้ไขอะไรลงไป ไม่ใช่แค่รู้ว่าไฟล์ไหนถูกแก้ไขเท่านั้น คุณลองใช้คำสั่ง `git diff`ดู (((git commands, diff)))
 ซึ่งเดี๋ยวเราจะไปดูกันในรายละเอียดของ `git diff` ภายหลัง แต่คุณจะต้องใช้มันบ่อยมากๆเพื่อตอบสองคำถามนี้ อะไรที่คุณแก้ไขไปแล้วยังไม่เข้า stage และ อะไรที่คุณเข้า stage และอะไรที่เข้า stage ไปแล้วใช่สิ่งที่จะ commit หรือเปล่า
แม้ว่า `git status` จะตอบคำถามพวกนี้ได้แบบกว้างๆโดยแสดงรายชื่อไฟล์ออกมา แค่คำสั่ง  `git diff` จะแสดงให้คุณเห็นจริงๆว่าบรรทัดไหนถูกเพิ่ม บรรทัดไหนถูกลบ การแก้ไขทั้งหมดอย่างที่มันเป็นจริงๆ

ยกตัวอย่างเช่น คุณแก้ไข และเข้า stage ให้ไฟล์ `README` อีกครั้ง จากนั้นคุณก็ไปแก้ไขไฟล์ `CONTRIBUTING.md` โดยไม่เอาเข้า staging ถ้าคุณรันคำสั่ง `git status` คุณจะเห็นอะไรแบบนี้อีกครั้งหนึ่ง:

[source,console]
----
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    new file:   README

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md
----

เพื่อจะให้เห็นว่าคุณแก้ไขอะไรไปแล้วยังไม่เอาเข้า stage ลองพิมพ์ `git diff` โดยไม่ต้องใส่อาร์กิวเม้นท์:

[source,console]
----
$ git diff
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index 8ebb991..643e24f 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -65,7 +65,8 @@ branch directly, things can get messy.
 Please include a nice description of your changes when you submit your PR;
 if we have to read the whole diff to figure out why you're contributing
 in the first place, you're less likely to get feedback and have your change
-merged in.
+merged in. Also, split your changes into comprehensive chunks if you patch is
+longer than a dozen lines.

 If you are starting to work on a particular area, feel free to submit a PR
 that highlights your work in progress (and note in the PR title that it's
----

คำสั่งนั้นจะเปรียบเทียบว่าอะไรในไดเร็คทอรี่การทำงานของคุณต่างกับสิ่งที่อยู่ใน staging โดยจะบอกคุณว่าคุณแก้ไขอะไรไปแล้วยังไม่เข้า stage

ถ้าคุณอยากจะเห็นว่าอะไรที่เข้า stage ไปแล้ว และกำลังจะเข้าไปอยู่ใน commit ถัดไป คุณสามารถใช้คำสั่ง `git diff --staged`  คำสั่งนี้จะเปรียบเทียบของที่เข้า stage ไปแล้วกับ commit สุดท้ายให้:

[source,console]
----
$ git diff --staged
diff --git a/README b/README
new file mode 100644
index 0000000..03902a1
--- /dev/null
+++ b/README
@@ -0,0 +1 @@
+My Project
----

It's important to note that `git diff` by itself doesn't show all changes made since your last commit – only changes that are still unstaged.
This can be confusing, because if you've staged all of your changes, `git diff` will give you no output.

สำหรับตัวอย่างอื่นๆ ถ้าคุณจะนำ `CONTRIBUTING.md`เข้า stage และแก้ไขมัน คุณสามารถใช้ `git diff` เพื่อดูการแก้ไขในไฟล์ที่เป็น staged แล้วว่าอะไรทำให้มันเป็น unstaged ถ้าสิ่งแวดล้อมของเราดูคล้ายๆแบบนี้:

[source,console]
----
$ git add CONTRIBUTING.md
$ echo 'test line' >> CONTRIBUTING.md
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    modified:   CONTRIBUTING.md

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md
----

ตอนนี้คุณสามารถใช้ `git diff` เพื่อดูว่าอะไรที่ยังคงไม่เข้า stage ได้

[source,console]
----
$ git diff
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index 643e24f..87f08c8 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -119,3 +119,4 @@ at the
 ## Starter Projects

 See our [projects list](https://github.com/libgit2/libgit2/blob/development/PROJECTS.md).
+# test line
----

และคำสั่ง `git diff --cached` เพื่อดูว่าอะไรเปลี่ยนไปจนกระทั่งเข้า stage (--staged and --cached are synonyms):

[source,console]
----
$ git diff --cached
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index 8ebb991..643e24f 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -65,7 +65,8 @@ branch directly, things can get messy.
 Please include a nice description of your changes when you submit your PR;
 if we have to read the whole diff to figure out why you're contributing
 in the first place, you're less likely to get feedback and have your change
-merged in.
+merged in. Also, split your changes into comprehensive chunks if you patch is
+longer than a dozen lines.

 If you are starting to work on a particular area, feel free to submit a PR
 that highlights your work in progress (and note in the PR title that it's
----

[บันทึก]
.Git Diff in an External Tool
====
เรายังสามารถใช้คำสั่ง `git diff` ในวิธีอื่นได้อีกตลอดการเวลาที่เหลือของหนังสือเล่มนี้ วิธีอื่นที่จะดูความแตกต่าง ถ้าคุณต้องการดูในแบบกราฟฟิค หรือดูผ่านโปรแกรมเฉพาะงานนี้แทน ถ้าคุรัน `git difftool` แทน `git diff` คุณจะได้ดูว่ามีอะไรต่างกันในไฟล์ผ่านโปรแกรมอย่างเช่น Araxis, emerge, vimdiff หรืออย่างอื่น ลองรัน `git difftool --tool-help` เพื่อดูว่ามีอะไรพร้อมให้คุณใช้บ้าง
====

[[_committing_changes]]
==== การ commit สิ่งที่แก้ไข

ตอนนี้ พื้นที่ของ staging ของคุณสร้างขึ้นในแบบที่คุณต้องการ คุณสามารถ commit การเปลี่ยนแปลงของคุณได้
จำไว้ว่าอะไรก็ตามที่เป็น unstaged คือไฟล์ที่ถูกสร้างขึ้นใหม่ หรือถูกแก้ไขโดยที่ยังไม่ได้รัน `git add` เลยตั้งแต่คุณแก้ไขพวกมัน ซึ่งจะมันจะไม่ไปสู่การ commitได้เลย
ไฟล์พวกนี้จะยังคงเป็นแค่ไฟล์ที่ถูกแก้ไขในดิสต์ของคุณเอง
ในกรณีนี้ สมมุติว่า เมื่อครั้งสุดท้ายที่คุณรันคำสั่ง git status คุณได้เห็นทุกอย่างเข้า stage แล้ว แล้วคุณก็ได้ commit การเปลี่ยนแปลงแล้วด้วย (((git commands, status)))
ทางที่ง่ายที่สุดที่จะ commit คือพิมพ์ว่า  `git commit`:(((git commands, commit)))

[source,console]
----
$ git commit
----

การทำแบบนี้จะทำให้เปิด editor ขึ้นมา (ซึ่งถูกเซ็ตไว้ในตัวแปร `$EDITOR` ใน เชลล์ ซึ่งโดยปกติจะเป็น vim หรือ emacs อย่างไรก็ตามคุณสามารถคอนฟิกมันตามต้องการได้โดยใช้คำสั่ง `git config --global core.editor` ดังที่คุณเห็นมาแล้วใน <<_getting_started>>) (((editor, changing default)))(((git commands, config)))

editor จะแสดงข้อความตามนี้ (ตัวอย่างนี้เป็นหน้าจอของ vim):

[source]
----

# Please enter the commit message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.
# On branch master
# Changes to be committed:
#	new file:   README
#	modified:   CONTRIBUTING.md
#
~
~
~
".git/COMMIT_EDITMSG" 9L, 283C
----

โดยปกติคุณจะได้เห็นข้อความของ commit สุดท้ายแสดงในผลลัพธ์ของคำส่ง `git status` ถูกบอกไว้ที่บรรทัดว่างๆบนสุดนี้
คุณสามารถลบข้อความพวกนี้และพิมพ์ข้อความของ commit ของคุณลงไป หรือจะปล่อยไว้อย่างนั้นเพื่อช่วยเตือนความจำว่าอะไรคือสิ่งที่คุณจะ commit ก็ได้
(เพื่อย้ำเตือนเวลาที่คุณแก้ไขอะไรลงไป และคุณยังสามารถใส่ค่า `-v` ลงไปในคำสั่ง `git commit` จะทำให้มันใส่การเปลี่ยนแปลงต่างๆเหมือน git diff ลงไปใน editor ให้คุณเห็นเลยว่าจริงๆคุณทำอะไรไว้บ้าง) เมื่อคุณออกจาก editor git จะสร้าง commit พร้อม ข้อความในนั้น (พร้อมข้อความอื่นๆ และเอาสิ่งที่เปลี่ยนแปลงออกไป)

หรืออีกวิธีหนึ่ง คุณสามารถพิมพ์ข้อความสำหรับ `commit` ลงไปในบรรทัดของคำสั่ง commit ด้วยการใส่ -m ตามหลังแบบนี้:

[source,console]
----
$ git commit -m "Story 182: Fix benchmarks for speed"
[master 463dc4f] Story 182: Fix benchmarks for speed
 2 files changed, 2 insertions(+)
 create mode 100644 README
----

ถึงตอนนี้คุณก็ได้สร้าง commit แรกแล้ว!
และก็ได้เห็นว่า commit นั้นให้ผลลัพธ์เกี่ยวกับตัวมัน: ว่า branch ไหนที่คุณได้ commit ไป (`master`), SHA-1 checksum เลขอะไรที่มันได้ (`463dc4f`), กี่ไฟล์ที่ถูกแก้ไข, และบรรทัดที่เท่าไหร่บ้างที่ถูกเพิ่ม และถูกลบออกใน commit นี้ 

จงจำไว้ว่า commit จะจำ snapshot ที่คุณทำไว้ใน staging ของคุณ
อะไรที่คุณไม่ได้ทำ stage ไว้ก็จะยังคงเป็น modified อยู่แบบเดิม; ซึ่งคุณสามารถทำ commit อื่น เพื่อเพิ่มมันเข้าไว้ในประวัติได้
ทุกครั้งที่คุณ commit คุณกำลังบันทึก snapshot ของโปรเจคของคุณซึ่งนั่นจะทำให้คุณสามารถย้อนกลับไปหรือกลับไปเปรียบเทียบทีหลังได้

==== Skipping the Staging Area

(((staging area, skipping)))
Although it can be amazingly useful for crafting commits exactly how you want them, the staging area is sometimes a bit more complex than you need in your workflow.
If you want to skip the staging area, Git provides a simple shortcut.
Adding the `-a` option to the `git commit` command makes Git automatically stage every file that is already tracked before doing the commit, letting you skip the `git add` part:

[source,console]
----
$ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md

no changes added to commit (use "git add" and/or "git commit -a")
$ git commit -a -m 'added new benchmarks'
[master 83e38c7] added new benchmarks
 1 file changed, 5 insertions(+), 0 deletions(-)
----

Notice how you don't have to run `git add` on the ``CONTRIBUTING.md'' file in this case before you commit.

[[_removing_files]]
==== Removing Files

(((files, removing)))
To remove a file from Git, you have to remove it from your tracked files (more accurately, remove it from your staging area) and then commit.
The `git rm` command does that, and also removes the file from your working directory so you don't see it as an untracked file the next time around.

If you simply remove the file from your working directory, it shows up under the ``Changed but not updated'' (that is, _unstaged_) area of your `git status` output:

[source,console]
----
$ rm PROJECTS.md
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes not staged for commit:
  (use "git add/rm <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        deleted:    PROJECTS.md

no changes added to commit (use "git add" and/or "git commit -a")
----

Then, if you run `git rm`, it stages the file's removal:

[source,console]
----
$ git rm PROJECTS.md
rm 'PROJECTS.md'
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    deleted:    PROJECTS.md
----

The next time you commit, the file will be gone and no longer tracked.
If you modified the file and added it to the index already, you must force the removal with the `-f` option.
This is a safety feature to prevent accidental removal of data that hasn't yet been recorded in a snapshot and that can't be recovered from Git.

Another useful thing you may want to do is to keep the file in your working tree but remove it from your staging area.
In other words, you may want to keep the file on your hard drive but not have Git track it anymore.
This is particularly useful if you forgot to add something to your `.gitignore` file and accidentally staged it, like a large log file or a bunch of `.a` compiled files.
To do this, use the `--cached` option:

[source,console]
----
$ git rm --cached README
----

You can pass files, directories, and file-glob patterns to the `git rm` command.
That means you can do things such as

[source,console]
----
$ git rm log/\*.log
----

Note the backslash (`\`) in front of the `*`.
This is necessary because Git does its own filename expansion in addition to your shell's filename expansion.
This command removes all files that have the `.log` extension in the `log/` directory.
Or, you can do something like this:

[source,console]
----
$ git rm \*~
----

This command removes all files that end with `~`.

[[_git_mv]]
==== Moving Files

(((files, moving)))
Unlike many other VCS systems, Git doesn't explicitly track file movement.
If you rename a file in Git, no metadata is stored in Git that tells it you renamed the file.
However, Git is pretty smart about figuring that out after the fact – we'll deal with detecting file movement a bit later.

Thus it's a bit confusing that Git has a `mv` command.
If you want to rename a file in Git, you can run something like

[source,console]
----
$ git mv file_from file_to
----

and it works fine.
In fact, if you run something like this and look at the status, you'll see that Git considers it a renamed file:

[source,console]
----
$ git mv README.md README
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    renamed:    README.md -> README
----

However, this is equivalent to running something like this:

[source,console]
----
$ mv README.md README
$ git rm README.md
$ git add README
----

Git figures out that it's a rename implicitly, so it doesn't matter if you rename a file that way or with the `mv` command.
The only real difference is that `mv` is one command instead of three – it's a convenience function.
More important, you can use any tool you like to rename a file, and address the add/rm later, before you commit.
