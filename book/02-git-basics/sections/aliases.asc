[[_git_aliases]]
=== นามแฝงใน git

(((aliases)))
ก่อนจะจบบทนี้ใน git เบื้องต้น นี่คือเกร็ดเล็กน้อย คุณสามารถสร้างประสบการณ์ที่เรียบง่ายขึ้น สะดวกมากขึ้น และคุ้นเคยมากขึ้นด้วย นามแฝง 
เราจะไม่คาดหวังว่าคุณจะใช้มันภายหลังจากอ่านหนังสือ แต่คุณควรรู้ว่ามันใช้งานอย่างไร

git จะไม่แนะนำคำสั่งแบบอัตโนมัติเมื่อคุณเริ่มพิมพ์คำสั่ง ถ้าคุณไม่อยากที่จะต้องพิมพ์คำสั่งทั้งหมด คุณสามารถทำให้มันง่ายขึ้นด้วยการตั้งนามแฝงให้คำสั่งด้วยการใช้  `git config`.(((git commands, config)))
และนี่คือตัวอย่างนิดหน่อยที่คุณอาจจะต้องการตั้งค่า:

[source,console]
----
$ git config --global alias.co checkout
$ git config --global alias.br branch
$ git config --global alias.ci commit
$ git config --global alias.st status
----

ตัวอย่างเช่น แทนที่คุณจะพิมพ์ว่า `git commit` ก็เปลี่ยนเป็น `git ci` แทน
เมื่อคุณใช้ git คุณอาจจะต้องใช้คำสั่งอื่นๆบ่อยเหมือนกัน เพราะฉะนั้น อย่าลังเลที่จะสร้างนามแฝง

ด้วยเทคนิคนี้ คุณยังสามารถใช้มันสร้างคำสั่งที่คุณอยากได้ ที่คุณอยากให้มีเพิ่มขึ้น
ตัวอย่างเช่น เมื่อคุณต้องการแก้ไขปัญหากับไฟล์ที่ยังไม่เข้า stage คุณสามารถเพิ่มนามแฝงใน git แบบนี้:

[source,console]
----
$ git config --global alias.unstage 'reset HEAD --'
----

นี่จะทำให้สองคำสั่งต่อไปนี้มีค่าเท่ากัน:
[source,console]
----
$ git unstage fileA
$ git reset HEAD fileA
----

นี่จะทำให้ดูชัดเจนขึ้น
มันจะดูเป็นธรรมชาติเมื่อเพิ่มคำสั่ง `last` แบบนี้

[source,console]
----
$ git config --global alias.last 'log -1 HEAD'
----

แบบนี้คุณจะเห็น commit สุดท้ายได้ง่ายขึ้น:
[source,console]
----
$ git last
commit 66938dae3329c7aebe598c2246a8e6af90d04646
Author: Josh Goebel <dreamer3@example.com>
Date:   Tue Aug 26 19:48:51 2008 +0800

    test for current head

    Signed-off-by: Scott Chacon <schacon@example.com>
----

git ง่ายที่จะแทนที่คำสั่งใหม่ด้วยนามแฝงที่คุณทำขึ้น
อย่างไรก็ดี คุณอาจจะต้องการรันคำสั่งอื่น แทนที่จะใช้คำสั่งย่อยๆของ git เอง
ในกรณีนี้ คุณน่าจะเริ่มต้นคำสั่งด้วยอักษร `!`
นี่จะเป็นประโยชน์ถ้าคุณเขียนเครื่องมือมาใช้กับ repo ของคุณ
โดยเราสามารถทดลองตั้งชื่อ `git visual` ใหม่ด้วย `gitk`:

[source,console]
----
$ git config --global alias.visual "!gitk"
----
