[[_git_aliases]]
=== นามแฝงใน git

(((aliases)))
ก่อนจะจบบทนี้ใน git เบื้องต้น นี่คือเกร็ดเล็กน้อย คุณสามารถสร้างประสบการณ์ที่เรียบง่ายขึ้น สะดวกมากขึ้น และคุ้นเคยมากขึ้นด้วย นามแฝง 
เราจะไม่คาดหวังว่าคุณจะใช้มันภายหลังจากอ่านหนังสือ แต่คุณควรรู้ว่ามันใช้งานอย่างไร

git จะไม่แนะนำคำสั่งแบบอัตโนมัติเมื่อคุณเริ่มพิมพ์คำสั่ง ถ้าคุณไม่อยากที่จะต้องพิมพ์คำสั่งทั้งหมด คุณสามารถทำให้มันง่ายขึ้นด้วยการตั้งนามแฝงให้คำสั่งด้วยการใช้  `git config`.(((git commands, config)))
และนี่คือตัวอย่างนิดหน่อยที่คุณอาจจะต้องการตั้งค่า:

[source,console]
----
$ git config --global alias.co checkout
$ git config --global alias.br branch
$ git config --global alias.ci commit
$ git config --global alias.st status
----

This means that, for example, instead of typing `git commit`, you just need to type `git ci`.
As you go on using Git, you'll probably use other commands frequently as well; don't hesitate to create new aliases.

This technique can also be very useful in creating commands that you think should exist.
For example, to correct the usability problem you encountered with unstaging a file, you can add your own unstage alias to Git:

[source,console]
----
$ git config --global alias.unstage 'reset HEAD --'
----

This makes the following two commands equivalent:

[source,console]
----
$ git unstage fileA
$ git reset HEAD fileA
----

This seems a bit clearer.
It's also common to add a `last` command, like this:

[source,console]
----
$ git config --global alias.last 'log -1 HEAD'
----

This way, you can see the last commit easily:

[source,console]
----
$ git last
commit 66938dae3329c7aebe598c2246a8e6af90d04646
Author: Josh Goebel <dreamer3@example.com>
Date:   Tue Aug 26 19:48:51 2008 +0800

    test for current head

    Signed-off-by: Scott Chacon <schacon@example.com>
----

As you can tell, Git simply replaces the new command with whatever you alias it for.
However, maybe you want to run an external command, rather than a Git subcommand.
In that case, you start the command with a `!` character.
This is useful if you write your own tools that work with a Git repository.
We can demonstrate by aliasing `git visual` to run `gitk`:

[source,console]
----
$ git config --global alias.visual "!gitk"
----
