[[_remote_repos]]
=== การทำงานกับ remotes

เพื่อให้สามารถทำงานร่วมกันใน git คุณต้องรู้ว่าจะจัดการการ remote ไปยัง repo ได้อย่างไร
Remote repository เป็นการทำเวอร์ชั่นของโปรเจ็คคุณบน internet หรือ ที่ใดสักแห่งในเน็ตเวิร์ก
และคุณจะทำมันมากแค่ไหนก็ได้ แต่ละเวอร์ชั่น จะทำเป็นแบบ อ่านได้อย่างเดียว หรือแบบ อ่านและเขียนด้วยก็ได้
การทำงานร่วมกับคนอื่น โดยการจัดการ repo แบบ remote นี้ ทำให้การ push และ pull สามารทำได้เมื่อคุณต้องการแชร์งาน
การจัดการ repo แบบ remote นี้รวมถึงความรู้ว่าจะเพิ่ม remote repositories หรือลบ อย่างไรให้ถูกต้อง และจัดการ branch ของ remote อีกจำนวนมากอย่างไร และทำอย่างไรที่จะระบุว่ามันถูก track แล้วหรือยัง
ในบทนี้ เราจะกล่าวรวมไปถึงความรู้บางส่วนในการจัดการการ remote อีกด้วย

==== การแสดง remotes ของคุณ

เพื่อจะเห็นว่าคุณมี remote อะไรบ้าง ให้ใช้คำสั่ง `git remote`  (((git commands, remote)))
มันจะแสดงรายการ remote ที่คุณมีอยู่ ออกมาเป็นชื่อแบบสั้น
ถ้าคุณมี repo ที่โคลนมา อย่างน้อย คุณควรเห็น origin - ซึ่งเป็นค่าเริ่มต้นของชื่อ ที่ git ตั้งให้กับ server ที่คุณโคลน repo มา

[source,console]
----
$ git clone https://github.com/schacon/ticgit
Cloning into 'ticgit'...
remote: Reusing existing pack: 1857, done.
remote: Total 1857 (delta 0), reused 0 (delta 0)
Receiving objects: 100% (1857/1857), 374.35 KiB | 268.00 KiB/s, done.
Resolving deltas: 100% (772/772), done.
Checking connectivity... done.
$ cd ticgit
$ git remote
origin
----

คุณยังสามารถใช้ `-v` เพื่อให้แสดงว่า URLs ของ remote คืออะไร

[source,console]
----
$ git remote -v
origin	https://github.com/schacon/ticgit (fetch)
origin	https://github.com/schacon/ticgit (push)
----

ถ้าคุณมี remote มากกว่าหนึ่ง คำสั่งนี้จะแสดงออกมาทั้งหมด
ตัวอย่างเช่น มี repo หนึ่ง มีหลาย remote สำหรับทำงานกับคนหลายกลุ่ม อาจจะให้ผลลัพธ์แบบนี้

[source,console]
----
$ cd grit
$ git remote -v
bakkdoor  https://github.com/bakkdoor/grit (fetch)
bakkdoor  https://github.com/bakkdoor/grit (push)
cho45     https://github.com/cho45/grit (fetch)
cho45     https://github.com/cho45/grit (push)
defunkt   https://github.com/defunkt/grit (fetch)
defunkt   https://github.com/defunkt/grit (push)
koke      git://github.com/koke/grit.git (fetch)
koke      git://github.com/koke/grit.git (push)
origin    git@github.com:mojombo/grit.git (fetch)
origin    git@github.com:mojombo/grit.git (push)
----

หมายความว่าคุณสามารถ pull งานได้จากทุกๆที่ในรายการนี้ แถมยังง่ายด้วย
เราอาจจะเพิ่มเรื่องสิทธิในการ push สำหรับ repo ใดก็ได้ในนี้ แต่เรายังไม่กล่าวถึงมันที่นี่

ข้อสังเกตคือ remote พวกนี้ใช้โปรโตคอลหลายแบบ ซึ่งเราจะให้รายละเอียดในเรื่องนี้ต่อที่ <<_git_on_the_server>>

==== การเพิ่มรีโมทให้ repositories

เราได้กล่าวถึงเรื่องนี้และได้สาธิตให้เห็นการเพิ่มรีโมทให้กับ repositories กันมาแล้วก่อนหน้านี้ แต่ตอนนี้เราจะทำให้ชัดเจนขึ้น
ด้วยการเพิ่มรีโมทและตั้งชื่อย่อ เพื่อให้ง่ายสำหรับอ้างถึงด้วยการรันคำสั่ง  `git remote add [shortname] [url]`:

[source,console]
----
$ git remote
origin
$ git remote add pb https://github.com/paulboone/ticgit
$ git remote -v
origin	https://github.com/schacon/ticgit (fetch)
origin	https://github.com/schacon/ticgit (push)
pb	https://github.com/paulboone/ticgit (fetch)
pb	https://github.com/paulboone/ticgit (push)
----

ทีนี่คุณก็สามารถใช้ `pb` ในคำสั่ง แทนที่จะใช้ URL เต็มๆได้แล้ว
ตัวอย่างเช่น ถ้าคุณต้องการจะ fetch (ดึงค่าของ repositories ล่าสุดลงมาจากรีโมท) ข้อมูลที่ Paul มี แต่คุณยังไม่มีใน repo คุณสามารถใช้คำสั่ง `git fetch pb`:

[source,console]
----
$ git fetch pb
remote: Counting objects: 43, done.
remote: Compressing objects: 100% (36/36), done.
remote: Total 43 (delta 10), reused 31 (delta 5)
Unpacking objects: 100% (43/43), done.
From https://github.com/paulboone/ticgit
 * [new branch]      master     -> pb/master
 * [new branch]      ticgit     -> pb/ticgit
----

ทีนี้ใน local repo ของคุณก็จะสามารถเข้าถึง branch ชื่อ master  ของ Paul ได้ด้วยชื่อ `pb/master` คุณอยากจะ merge มันเข้ากับ branch ไหนของคุณ หรือ คุณอยากจะ check out ไปที่ branch นั้นเพื่อจะตรวจดูเลยก็ได้
(เราจะไปใน branch ต่างๆและทำอะไรกับมันได้เยอะแยะต่อใน <<_git_branching>>.)

[[_fetching_and_pulling]]
==== การ fetch และการ pull จากรีโมท

อย่างที่เห็น เราดึงข้อมูลจากรีโมทโปรเจ็คได้ด้วยคำสั่ง : (((git commands, fetch)))

[source,console]
----
$ git fetch [remote-name]
----

คำสั่งนี้จะไปดึงข้อมูลของโปรเจ็คจากรีโมทที่คุณยังไม่มีลงมาที่โลคอลให้
หลังจากคำสั่งนี้ คุณจะสามารถเข้าถึง branch ทั้งหมดที่มีในรีโมท  ทำให้สามารถ merge หรือตรวจสอบข้อมูลใน branch พวกนั้นได้ตลอดเวลา

ถ้าคุณ clone repo อะไรมาก็ตาม คำสั่ง clone จะเพิ่มรีโมทให้ repo นั้นอัตโนมัติและตั้งชื่อว่า ``origin''
ดังนั้นคำสั่ง `git fetch origin` จะดึงข้อมูลใหม่ทั้งหมด นับตั้งแต่คุณ clone มันลงมา (หรือนับตั้งแต่ครั้งสุดท้ายที่คุณใช้คำสั่ง fetch)
ข้อสำคัญที่ต้องจำไว้คือ `git fetch`  จะดึงข้อมูลลงมาที่ local ให้ก็จริง แต่มันไม่ได้ merge ข้อมูลให้อัตโนมัติ
คุณจะต้องสั่ง merge เองเมื่อคุณต้องการ

ถ้าคุณมี branch ที่สร้างมาเพื่อทำงานกับ branch บนรีโมทโดยตรงßß
If you have a branch set up to track a remote branch (see the next section and <<_git_branching>> for more information), you can use the `git pull` command to automatically fetch and then merge a remote branch into your current branch.(((git commands, pull)))
This may be an easier or more comfortable workflow for you; and by default, the `git clone` command automatically sets up your local master branch to track the remote master branch (or whatever the default branch is called) on the server you cloned from.
Running `git pull` generally fetches data from the server you originally cloned from and automatically tries to merge it into the code you're currently working on.

[[_pushing_remotes]]
==== Pushing to Your Remotes

When you have your project at a point that you want to share, you have to push it upstream.
The command for this is simple: `git push [remote-name] [branch-name]`.(((git commands, push)))
If you want to push your master branch to your `origin` server (again, cloning generally sets up both of those names for you automatically), then you can run this to push any commits you've done back up to the server:

[source,console]
----
$ git push origin master
----

This command works only if you cloned from a server to which you have write access and if nobody has pushed in the meantime.
If you and someone else clone at the same time and they push upstream and then you push upstream, your push will rightly be rejected.
You'll have to pull down their work first and incorporate it into yours before you'll be allowed to push.
See <<_git_branching>> for more detailed information on how to push to remote servers.

[[_inspecting_remote]]
==== Inspecting a Remote

If you want to see more information about a particular remote, you can use the `git remote show [remote-name]` command.(((git commands, remote)))
If you run this command with a particular shortname, such as `origin`, you get something like this:

[source,console]
----
$ git remote show origin
* remote origin
  Fetch URL: https://github.com/schacon/ticgit
  Push  URL: https://github.com/schacon/ticgit
  HEAD branch: master
  Remote branches:
    master                               tracked
    dev-branch                           tracked
  Local branch configured for 'git pull':
    master merges with remote master
  Local ref configured for 'git push':
    master pushes to master (up to date)
----

It lists the URL for the remote repository as well as the tracking branch information.
The command helpfully tells you that if you're on the master branch and you run `git pull`, it will automatically merge in the master branch on the remote after it fetches all the remote references.
It also lists all the remote references it has pulled down.

That is a simple example you're likely to encounter.
When you're using Git more heavily, however, you may see much more information from `git remote show`:

[source,console]
----
$ git remote show origin
* remote origin
  URL: https://github.com/my-org/complex-project
  Fetch URL: https://github.com/my-org/complex-project
  Push  URL: https://github.com/my-org/complex-project
  HEAD branch: master
  Remote branches:
    master                           tracked
    dev-branch                       tracked
    markdown-strip                   tracked
    issue-43                         new (next fetch will store in remotes/origin)
    issue-45                         new (next fetch will store in remotes/origin)
    refs/remotes/origin/issue-11     stale (use 'git remote prune' to remove)
  Local branches configured for 'git pull':
    dev-branch merges with remote dev-branch
    master     merges with remote master
  Local refs configured for 'git push':
    dev-branch                     pushes to dev-branch                     (up to date)
    markdown-strip                 pushes to markdown-strip                 (up to date)
    master                         pushes to master                         (up to date)
----

This command shows which branch is automatically pushed to when you run `git push` while on certain branches.
It also shows you which remote branches on the server you don't yet have, which remote branches you have that have been removed from the server, and multiple branches that are automatically merged when you run `git pull`.

==== Removing and Renaming Remotes

If you want to rename a reference you can run `git remote rename` to change a remote's shortname.(((git commands, remote)))
For instance, if you want to rename `pb` to `paul`, you can do so with `git remote rename`:

[source,console]
----
$ git remote rename pb paul
$ git remote
origin
paul
----

It's worth mentioning that this changes your remote branch names, too.
What used to be referenced at `pb/master` is now at `paul/master`.

If you want to remove a remote for some reason – you've moved the server or are no longer using a particular mirror, or perhaps a contributor isn't contributing anymore – you can use `git remote rm`:

[source,console]
----
$ git remote rm paul
$ git remote
origin
----
