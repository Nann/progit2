[[_undoing]]
=== การแก้ไขสิ่งต่างๆ

เมื่อใดก็ตาม ที่คุณต้องการจะแก้ไขบางอย่าง
ตอนนี้ เราจะมาพิจารณาดูเครื่องมือพื้นฐานที่จะช่วยให้คุณแก้ไข สิ่งที่คุณทำลงไป
โปรดระมัดระวัง เพราะในบรรดาสิ่งที่แก้ไขได้ทั้งหมด จะมีบางอย่างที่คุณห้ามแก้ไขมันจริงๆ
นี่เป็นหนึ่งในข้อผิดพลาด ที่อาจจะทำให้งานของคุณหายไปหากคุณทำผิดขั้นตอน

หนึ่งในข้อผิดพลาดที่พบได้บ่อย เวลาคุณ commit ด้วยความเร็วสูงกว่าแสง และลืมเพิ่มบางไฟล์เข้าไป หรือ commit ด้วยข้อความเละๆ
ถ้าคุณอยากจะ commit ซ้ำ คุณสามารถสั่ง commit ด้วยออปชั่นนี้:

[source,console]
----
$ git commit --amend
----

คำสั่งนี้จะหยิบเอาของใน staging มา commit ใหม่
ถ้าคุณไม่ได้แก้ไขอะไรนับจาก commit สุดท้ายนะ (ตัวอย่างเช่น คุณรันคำสั่งนี้ทันทีหลังจาก commit สุดท้าย) หากทุกอย่างเหมือนกันละก็ สิ่งที่คุณจะแก้ไขได้ก็คือ ข้อความที่คุณ commit นั่นแหล่ะ

มันจะเปิด editor ขึ้นมาให้คุณ พร้อมข้อความของ commit ก่อนหน้านั้น
คุณสามารถแก้ไขข้อความได้ และมันจะไปทับข้อความก่อนหน้านี้

ดังตัวอย่าง ถ้าคุณ commit เสร็จ แล้วนึกขึ้นได้ว่าลืมนำไฟล์นึงเข้า stage และคุณต้องการเอามันเข้าไปใน commit นี้ด้วย คุณสามารถทำเลียนแบบตัวอย่างนี้ได้:

[source,console]
----
$ git commit -m 'initial commit'
$ git add forgotten_file
$ git commit --amend
----

เมื่อทำเสร็จคุณจะได้เพียงหนึ่ง commit เพราะ commit ที่สองจะไปแทนที่อันแรก

[[_unstaging]]
==== การเอาไฟล์ที่เข้า stage ไปแล้วออกจาก staging

สองช่วงต่อไปนี้ จะแสดงให้เห็นว่า ทำอย่างไรหากจะควบคุม ระหว่างเขตของ staging และ เขตที่ใช้ทำงาน
มีคำสั่งดีๆ ให้คุณใช้ตัดสิน ว่าของควรอยู่ที่ไหนในสองเขตนั้น และบอกคุณว่าทำอย่างไรหากต้องการแก้ไขมัน
ตัวอย่างเช่น คุณอาจจะแก้ไขไฟล์ สองไฟล์ และต้องการจะ commit ทั้งสองไฟล์แยกเป็นไฟล์ละ commit แต่คุณดันพิมพ์ลงไปว่า `git add *` กลายเป็นว่าทั้งสองไฟล์เข้า stage ไปแล้ว
ทีนี้จะเอาไฟล์นึงออกจาก stage ได้อย่างไร?
คำสั่ง `git status` บอกคุณว่า:

[source,console]
----
$ git add .
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    renamed:    README.md -> README
    modified:   CONTRIBUTING.md
----

ใต้ข้อความ ``Changes to be committed'', มันบอกให้ใช้คำสั่ง ` git reset HEAD <file>...` เพื่อเอาของออกจาก stage
งั้นเรามาลองใช้คำแนะนำเพื่อเอาไฟล์ `CONTRIBUTING.md` ออกจาก stage กัน:

[source,console]
----
$ git reset HEAD CONTRIBUTING.md
Unstaged changes after reset:
M	CONTRIBUTING.md
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    renamed:    README.md -> README

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md
----

คำสั่งนี้มันอาจจะดูแปลก แต่มันใช่อ่ะ
ทำให้ไฟล์ `CONTRIBUTING.md`กลับไปอยู่นอก stage อีกครั้ง

[NOTE]
=====
คำสั่ง `git reset` อาจเป็นอันตรายได้ หากคุณสั่งมันแล้วตามด้วย `--hard`, แต่ในตัวอย่างนี้มันจะไม่ไปแตะของในเขตที่ใช้ทำงานเลย เพราะคำสั่ง `git reset` โดยไม่มีออปชั่น จะไม่อันตรายเพราะมันจะแตะเฉพาะของในเขต staging เท่านั้น
=====

ทีนี้ การร่ายมนต์นี้ก็จะทำให้คุณอยากรู้เกี่ยวกับคำสั่ง `git reset` ขึ้นมาแน่ๆ เราจะลงไปในรายละเอียดให้มากขึ้นเพื่อดูให้รู้ว่า `reset` ทำอะไร และจะควบคุมมันอย่างไรให้มันทำสิ่งที่น่าสนใจใน <<_git_reset>>.

==== การยกเลิกการแก้ไขไฟล์

ถ้าคุณพบว่าคุณไม่อยากได้สิ่งที่คุณแก้ไขในไฟล์ `CONTRIBUTING.md` คุณจะทำอย่างไร
มีวิธีง่ายๆที่ยกเลิกมันไหม ให้มันย้อนกลับไปเป็นเหมือน commit ล่าสุด (หรือเป็นเหมือนเมื่อตอนที่เพิ่งโคลนมา หรือเหมือนเมื่อตอนที่คุณเพิ่งจะได้ไฟล์มาใหม่ๆ)
โชคดีที่คำสั่ง `git status` บอกวิธีให้เราด้วย
ในตัวอย่างสุดท้ายที่ผ่านมา ผลลัพธ์แสดงข้อความทำนองนี้:

[source,console]
----
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md
----

มันบอกคุณชัดเจนว่าทำอย่างไรถึงจะยกเลิกการแก้ไขที่คุณทำไว้
มาดูกันว่ามันบอกเราว่าอย่างไร:

[source,console]
----
$ git checkout -- CONTRIBUTING.md
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    renamed:    README.md -> README

----

คุณจะเห็นว่าการเปลี่ยนแปลงทั้งหมดจะถูกย้อนกลับไป

[สำคัญ]
=====
มันสำคัญมากที่จะต้องเข้าใจว่าคำสั่ง `git checkout -- [file]` เป็นคำสั่งที่อันตราย เพราะไม่ว่าอะไรที่คุณแก้ไขลงไปในไฟล์นั้นจะหายไปหมด ราวกับไฟล์ถูกทับด้วยไฟล์อื่น
อย่าใช้คำสั่งนี้ เว้นแต่คุณจะแน่ใจว่าคุณไม่ต้องการไฟล์นั้นแล้วจริงๆ
=====

ถ้าคุณยังต้องการที่จะเก็บการแก้ไขไฟล์นั้นเอาไว้แต่ยังไม่อยากเก็บตอนนี้ เราจะไปดูเรื่องการซ่อนของ และการทำ branch กันที่ <<_git_branching>>; ซึ่งเป็นทางที่ดีกว่าที่เราจะใช้

โปรดจำไว้ว่า สิ่งใดก็ตามที่ถูก __committed__ ลงใน Git สามารถกู้คืนได้ตลอดเวลา
แม้ว่า commit นั้นจะอยู่บน branch ที่ถูกลบไปแล้ว หรือ commit นั้นจะถูกทับด้วยคำสั่ง `--amend` ก็ยังสามารถกูคืนได้ (see <<_data_recovery>> for data recovery).
แต่อะไรก็แล้วแต่ ที่คุณไม่เคย commit ไว้ ก็อย่าหวังจะได้เห็นมันอีกตลอดกาล
