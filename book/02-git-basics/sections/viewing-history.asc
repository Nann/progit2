[[_viewing_history]]
=== การดูประวัติ commit

หลังจากที่คุณได้สร้าง commit มาตั้งมากมาย หรืออาจจะโคลนของมาจาก repo ไหนสักแห่ง คุณอาจจะเริ่มอยากจะดูย้อนกลับไปบ้างว่าเกิดอะไรขึ้นบ้าง
เครื่องมีอที่มีประสิทธิภาพดีมากๆที่ถูกใช้บ่อยที่สุดก็คือคำสั่ง `git log`

นี่คือตัวอย่างโปรเจ็คอย่างง่ายชื่อว่า ``simplegit'' ลองเอามารันดู

[source,console]
----
git clone https://github.com/schacon/simplegit-progit
----

เมื่อคุณรัน `git log` ในโปรเจ็ค คุณควรได้เห็นผลลัพธ์แบบนี้:(((git commands, log)))

[source,console]
----
$ git log
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the version number

commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 16:40:33 2008 -0700

    removed unnecessary test

commit a11bef06a3f659402fe7563abf99ad00de2209e6
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 10:31:28 2008 -0700

    first commit
----

ปกติถ้าไม่ได้ออปชั่นอะไร คำสั่ง `git log` จะแสดงรายการของ commit แบบย้อนลำดับเหตุการณ์ให้ หมายความว่า จะแสดง commit ล่าสุดก่อน อย่างที่เห็นนี้ แต่ละ commit จะแสดงค่า SHA-1 checksum, ชื่อผู้เขียน และ อีเมล์, วันที่เขียน และข้อความของ commit นั้น

 เนื่องจากคำสั่ง `git log` มีออปชั่นจำนวนมาก เราเลยจะแสดงให้คุณดูแค่บางคำสั่งที่เป็นที่นิยมจริงๆ

ออปชั่นหนึ่งที่มีประโยชน์อย่างมากคือ `-p` มันจะแสดงให้เห็นมีแต่ละ commit มีอะไรที่ต่างกันบ้าง

คุณสามารถเพิ่ม `-2` เพื่อจำกัดผลลัพธ์ให้แสดงแค่ 2 รายการ:

[source,console]
----
$ git log -p -2
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the version number

diff --git a/Rakefile b/Rakefile
index a874b73..8f94139 100644
--- a/Rakefile
+++ b/Rakefile
@@ -5,7 +5,7 @@ require 'rake/gempackagetask'
 spec = Gem::Specification.new do |s|
     s.platform  =   Gem::Platform::RUBY
     s.name      =   "simplegit"
-    s.version   =   "0.1.0"
+    s.version   =   "0.1.1"
     s.author    =   "Scott Chacon"
     s.email     =   "schacon@gee-mail.com"
     s.summary   =   "A simple gem for using Git in Ruby code."

commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 16:40:33 2008 -0700

    removed unnecessary test

diff --git a/lib/simplegit.rb b/lib/simplegit.rb
index a0a60ae..47c6340 100644
--- a/lib/simplegit.rb
+++ b/lib/simplegit.rb
@@ -18,8 +18,3 @@ class SimpleGit
     end

 end
-
-if $0 == __FILE__
-  git = SimpleGit.new
-  puts git.show
-end
\ No newline at end of file
----

ออปชั่นนี้แสดงข้อมูลเหมือนปกติ แต่จะเพิ่มส่วนแสดงสิ่งที่แตกต่างกันในแต่ละรายการ ซึ่งจะช่วยให้เราทบทวนโค้ดได้อย่างรวดเร็วว่าเกิดอะไรขึ้นบ้างในแต่ะล commit ที่ผู้ร่วมงานเพิ่มเข้ามา
คุณยังสามารถเพิ่มออปชั่นต่อท้ายได้เรื่อยๆกับคำสั่ง `git log` ตัวอย่างเช่น ถ้าคุณต้องการจะดูสถิติแบบย่อของแต่ละ commit คุณสามารถใช้ออปชั่น `--stat` ได้ด้วย:

[source,console]
----
$ git log --stat
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the version number

 Rakefile | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 16:40:33 2008 -0700

    removed unnecessary test

 lib/simplegit.rb | 5 -----
 1 file changed, 5 deletions(-)

commit a11bef06a3f659402fe7563abf99ad00de2209e6
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 10:31:28 2008 -0700

    first commit

 README           |  6 ++++++
 Rakefile         | 23 +++++++++++++++++++++++
 lib/simplegit.rb | 25 +++++++++++++++++++++++++
 3 files changed, 54 insertions(+)
----

อย่างที่เห็น ออปชั่น `--stat` แสดงผลลัพธ์ด้านล่างว่าแต่ละ commit มีไฟล์อะไรบ้างที่ถูกแก้ไข มีกี่ไฟล์ และกี่บรรทัดที่ถูกเพิ่ม และกี่บรรทัดถูกลบออก พร้อมสรุปให้ในตอนท้ายอีกด้วย

ออปชั่นอื่นที่มีประโยช์จริงๆก็คือ `--pretty` `จะเปลี่ยนรูปแบบการแสดงผลลัพธ์ไปเป็นรูปแบบอื่นนอกเหนือจากแบบปกติ
ซึ่งมีให้เลือกใช้ไม่มากนัก เช่น `oneline` จะแสดงแต่ละ commit จบภายในบรรทัดเดียว ซึ่งเหมาะสำหรับใช้ดู commit ทีละมากๆ
หรือออปชั่นอื่นๆอีกเช่น `short`, `full`, และ `fuller` จะแสดงผลลัพธ์ แบบ คร่าวๆในรูปแบบเดียวกัน โดยแสดงข้อมูลน้อยหรือมากขึ้นตามลำดับ:

[source,console]
----
$ git log --pretty=oneline
ca82a6dff817ec66f44342007202690a93763949 changed the version number
085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7 removed unnecessary test
a11bef06a3f659402fe7563abf99ad00de2209e6 first commit
----

ออปชั่นที่น่าสนใจที่สุดคือ `format` เพราะมันยอมให้คุณกำหนดรูปแบบการแสดงผลได้เอง
นี่มันเป็นประโยชน์มากเมื่อคุณกำหนดรูปแบบให้เครื่องแปลงเป็นผลลัพธ์ให้ และการกำหนดลงไปแบบนี้ มันจะไม่มีอะไรเปลี่ยนไปเมื่อ git มีการอัพเดท:(((log formatting)))

[source,console]
----
$ git log --pretty=format:"%h - %an, %ar : %s"
ca82a6d - Scott Chacon, 6 years ago : changed the version number
085bb3b - Scott Chacon, 6 years ago : removed unnecessary test
a11bef0 - Scott Chacon, 6 years ago : first commit
----

<<pretty_format>> นี่คือรายการบางส่วนของออปชั่นใช้ใน format

[[pretty_format]]
.Useful options for `git log --pretty=format`
[cols="1,4",options="header"]
|================================
| Option   | Description of Output
| `%H`     | Commit hash
| `%h`     | Abbreviated commit hash
| `%T`     | Tree hash
| `%t`     | Abbreviated tree hash
| `%P`     | Parent hashes
| `%p`     | Abbreviated parent hashes
| `%an`    | Author name
| `%ae`    | Author e-mail
| `%ad`    | Author date (format respects the --date=option)
| `%ar`    | Author date, relative
| `%cn`    | Committer name
| `%ce`    | Committer email
| `%cd`    | Committer date
| `%cr`    | Committer date, relative
| `%s`     | Subject
|================================

คุณอาจจะสงสัยว่ามีอะไรต่างกันระหว่าง _author_ และ _committer_
author คือคนแรกที่เขียนงาน ส่วน committer คือคนที่แก้ไขงาน ดังนั้น ถ้าคุณเติมงานเข้าไปในโปรเจค และมีใครสักคนแก้ไขส่วนของคุณต่อ คุณทั้งคู่จะได้เครดิตในงานนั้น โดยคุณเป็น author ส่วนอีกคนก็เป็น committer
เราจะสำรวจข้อแตกต่างนี้ต่อใน <<_distributed_git>>.

ออปชั่น oneline  มีประโยชน์มากโดยเฉพาะกับ ออปชั่น `log` และออปชั่นที่ชื่อ `--graph` โดยมันจะเพิ่มรหัส ASCII สวยๆเพื่อมาแสดงเป็นภาพของ branch และประวัติการ merge:

[source,console]
----
$ git log --pretty=format:"%h %s" --graph
* 2d3acf9 ignore errors from SIGCHLD on trap
*  5e3ee11 Merge branch 'master' of git://github.com/dustin/grit
|\
| * 420eac9 Added a method for getting the current branch.
* | 30e367c timeout code and tests
* | 5a09431 add timeout protection to grit
* | e1193f8 support for heads with slashes in them
|/
* d6016bc require time for xmlschema
*  11d191e Merge branch 'defunkt' into local
----

ผลลัพธ์ชนิดนี้จะเริ่มมีความสำคัญมากเมื่อเราไปถึงบทที่กล่าวถึงการทำ branch และการ merge

พวกนั้นคือบางส่วนของการจัดรูปแบบ ที่ใช้ในออปชั่น `git log`  และนี่คืออีกจำนวนหนึ่ง <<log_options>> รายการของออปชั่น ที่เราพบว่ามีบางรูปแบบที่อาจจะมีประโยชน์ พร้อมวิธีที่พวกเขาใช้ในการเปลี่ยนข้อมูลที่แสดงออกมา

[[log_options]]
.Common options to `git log`
[cols="1,4",options="header"]
|================================
| Option            | Description
| `-p`              | Show the patch introduced with each commit.
| `--stat`          | Show statistics for files modified in each commit.
| `--shortstat`     | Display only the changed/insertions/deletions line from the --stat command.
| `--name-only`     | Show the list of files modified after the commit information.
| `--name-status`   | Show the list of files affected with added/modified/deleted information as well.
| `--abbrev-commit` | Show only the first few characters of the SHA-1 checksum instead of all 40.
| `--relative-date` | Display the date in a relative format (for example, ``2 weeks ago'') instead of using the full date format.
| `--graph`         | Display an ASCII graph of the branch and merge history beside the log output.
| `--pretty`        | Show commits in an alternate format. Options include oneline, short, full, fuller, and format (where you specify your own format).
|================================

==== Limiting Log Output

In addition to output-formatting options, `git log` takes a number of useful limiting options – that is, options that let you show only a subset of commits.
You've seen one such option already – the `-2` option, which show only the last two commits.
In fact, you can do `-<n>`, where `n` is any integer to show the last `n` commits.
In reality, you're unlikely to use that often, because Git by default pipes all output through a pager so you see only one page of log output at a time.

However, the time-limiting options such as `--since` and `--until` are very useful.
For example, this command gets the list of commits made in the last two weeks:

[source,console]
----
$ git log --since=2.weeks
----

This command works with lots of formats – you can specify a specific date like `"2008-01-15"`, or a relative date such as `"2 years 1 day 3 minutes ago"`.

You can also filter the list to commits that match some search criteria.
The `--author` option allows you to filter on a specific author, and the `--grep` option lets you search for keywords in the commit messages.
(Note that if you want to specify both author and grep options, you have to add `--all-match` or the command will match commits with either.)

Another really helpful filter is the `-S` option which takes a string and only shows the commits that introduced a change to the code that added or removed that string.  For instance, if you wanted to find the last commit that added or removed a reference to a specific function, you could call:

[source,console]
----
$ git log -Sfunction_name
----

The last really useful option to pass to `git log` as a filter is a path.
If you specify a directory or file name, you can limit the log output to commits that introduced a change to those files.
This is always the last option and is generally preceded by double dashes (`--`) to separate the paths from the options.

In <<limit_options>> we'll list these and a few other common options for your reference.

[[limit_options]]
.Options to limit the output of `git log`
[cols="2,4",options="header"]
|================================
| Option                | Description
| `-(n)`                | Show only the last n commits
| `--since`, `--after`  | Limit the commits to those made after the specified date.
| `--until`, `--before` | Limit the commits to those made before the specified date.
| `--author`            | Only show commits in which the author entry matches the specified string.
| `--committer`         | Only show commits in which the committer entry matches the specified string.
| `--grep`              | Only show commits with a commit message containing the string
| `-S`                  | Only show commits adding or removing code matching the string
|================================

For example, if you want to see which commits modifying test files in the Git source code history were committed by Junio Hamano and were not merges in the month of October 2008, you can run something like this:(((log filtering)))

[source,console]
----
$ git log --pretty="%h - %s" --author=gitster --since="2008-10-01" \
   --before="2008-11-01" --no-merges -- t/
5610e3b - Fix testcase failure when extended attributes are in use
acd3b9e - Enhance hold_lock_file_for_{update,append}() API
f563754 - demonstrate breakage of detached checkout with symbolic link HEAD
d1a43f2 - reset --hard/read-tree --reset -u: remove unmerged new paths
51a94af - Fix "checkout --track -b newbranch" on detached HEAD
b0ad11e - pull: allow "git pull origin $something:$current_branch" into an unborn branch
----

Of the nearly 40,000 commits in the Git source code history, this command shows the 6 that match those criteria.
